{
  "mapsindoors": {
    "sections": [
      {
        "id": 1,
        "title": "The MapsIndoors SDK is a powerful tool for implementing indoor mapping solutions. Here's how to properly initialize and configure it",
        "summary": "<html lang=\"en\">",
        "code": "html\n<!DOCTYPE html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MapsIndoors Implementation</title>\n    \n    <!-- Load Mapbox first -->\n    <link href=\"https://api.mapbox.com/mapbox-gl-js/v3.8.0/mapbox-gl.css\" rel=\"stylesheet\">\n    <script src=\"https://api.mapbox.com/mapbox-gl-js/v3.8.0/mapbox-gl.js\"></script>\n    \n    <!-- Load MapsIndoors -->\n    <script src=\"https://app.mapsindoors.com/mapsindoors/js/sdk/4.40.0/mapsindoors-4.40.0.js.gz?apikey=YOUR_API_KEY\"></script>\n</head>\n<body>\n    <div id=\"map\" style=\"width: 100vw; height: 100vh;\"></div>\n    \n    <script>\n        document.addEventListener('DOMContentLoaded', function() {"
      },
      {
        "id": 2,
        "title": "Initialize MapsIndoors with Mapbox",
        "summary": "accessToken: 'YOUR_MAPBOX_TOKEN',",
        "code": "const mapViewOptions = {\n                element: document.getElementById('map'),\n                center: { lat: 30.3603212, lng: -97.7422623 }, // Austin Office example\n                zoom: 20,\n                maxZoom: 22,\n            };\n\n            const mapViewInstance = new mapsindoors.mapView.MapboxV3View(mapViewOptions);\n            const mapsIndoorsInstance = new mapsindoors.MapsIndoors({\n                mapView: mapViewInstance,\n            });\n            const mapboxInstance = mapViewInstance.getMap();"
      },
      {
        "id": 3,
        "title": "Add floor selector (essential for multi-floor buildings)",
        "summary": "new mapsindoors.FloorSelector(floorSelectorElement, mapsIndoorsInstance);",
        "code": "const floorSelectorElement = document.createElement('div');\n            mapboxInstance.addControl({ \n                onAdd: function () { return floorSelectorElement },\n                onRemove: function () { }\n            });"
      },
      {
        "id": 4,
        "title": "MapsIndoors ready event",
        "summary": "mapsIndoorsInstance.addListener('ready', function() {",
        "code": "console.log('MapsIndoors is ready');"
      },
      {
        "id": 6,
        "title": "This is where you'll typically begin adding your custom functionality",
        "summary": "",
        "code": "});"
      },
      {
        "id": 7,
        "title": "Error handling",
        "summary": "mapsIndoorsInstance.addListener('error', function(error) {",
        "code": "console.error('MapsIndoors error:', error);\n            });\n        });\n    </script>\n</body>\n</html>\nWorking with Locations"
      },
      {
        "id": 8,
        "title": "MapsIndoors organizes spaces into locations. Here's how to fetch and manipulate them",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 9,
        "title": "Get locations from MapsIndoors",
        "summary": "async function getLocations() {",
        "code": "try {"
      },
      {
        "id": 10,
        "title": "Get specific location types (meeting rooms in this example)",
        "summary": "types: ['MeetingRoom', 'MeetingRoom Small', 'MeetingRoom Extra Small', 'MeetingRoom Medium', 'MeetingRoom Large'],",
        "code": "const locations = await mapsindoors.services.LocationsService.getLocations({\n            venue: 'AUSTINOFFICE', // Specify your venue\n            take: 100 // Limit results\n        });\n        \n        console.log(`Found ${locations.length} locations`);"
      },
      {
        "id": 11,
        "title": "If no meeting rooms found, look for any rooms with polygon geometry",
        "summary": "if (locations.length < 5) {",
        "code": "console.log(\"Not enough meeting rooms found, looking for rooms with polygons...\");\n            const additionalLocations = await mapsindoors.services.LocationsService.getLocations({\n                venue: 'AUSTINOFFICE',\n                take: 100\n            });\n            \n            const roomCandidates = additionalLocations.filter(location => {\n                return location.geometry && \n                      (location.geometry.type === \"Polygon\" || \n                       location.geometry.type === \"MultiPolygon\");\n            });"
      },
      {
        "id": 12,
        "title": "Process these locations as needed",
        "summary": "return [...locations, ...roomCandidates];",
        "code": "}\n        \n        return locations;\n    } catch (error) {\n        console.error('Error fetching locations:', error);\n        return [];\n    }\n}"
      },
      {
        "id": 13,
        "title": "Get a specific location by ID",
        "summary": "async function getLocationById(locationId) {",
        "code": "try {\n        const location = await mapsindoors.services.LocationsService.getLocation(locationId);\n        return location;\n    } catch (error) {\n        console.error(`Error fetching location ${locationId}:`, error);\n        return null;\n    }\n}"
      },
      {
        "id": 14,
        "title": "Find nearest locations to a point",
        "summary": "async function findNearbyLocations(lat, lng, floor, radius = 5, type = null) {",
        "code": "try {\n        const queryParams = {\n            near: { lat, lng },\n            radius: radius, // meters\n            floor: floor,\n            take: 20\n        };"
      },
      {
        "id": 15,
        "title": "Add type filter if specified",
        "summary": "queryParams.types = Array.isArray(type) ? type : [type];",
        "code": "if (type) {\n        }\n        \n        const locations = await mapsindoors.services.LocationsService.getLocations(queryParams);\n        return locations;\n    } catch (error) {\n        console.error('Error finding nearby locations:', error);\n        return [];\n    }\n}\nDisplay Rules and Visualization"
      },
      {
        "id": 16,
        "title": "Control how locations appear on the map",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 17,
        "title": "Apply display rules based on location status",
        "summary": "",
        "code": "function updateLocationDisplayRules(locations, statusProperty) {"
      },
      {
        "id": 18,
        "title": "Group locations by status",
        "summary": "",
        "code": "const statuses = {};"
      },
      {
        "id": 19,
        "title": "First, collect all IDs by status",
        "summary": "if (!statuses[status]) {",
        "code": "locations.forEach(location => {\n        const status = location[statusProperty] || 'default';\n            statuses[status] = [];\n        }\n        statuses[status].push(location.id);\n    });"
      },
      {
        "id": 20,
        "title": "Define colors for different statuses",
        "summary": "'available': '#4CAF50', // Green",
        "code": "const statusColors = {\n        'occupied': '#F44336', // Red\n        'maintenance': '#FF9800', // Orange\n        'default': '#2196F3' // Blue\n    };"
      },
      {
        "id": 21,
        "title": "Apply display rules for each status group",
        "summary": "mapsIndoorsInstance.setDisplayRule(locationIds, {",
        "code": "Object.entries(statuses).forEach(([status, locationIds]) => {\n        const color = statusColors[status] || statusColors.default;\n        \n            polygonVisible: true,\n            polygonFillColor: color,\n            polygonFillOpacity: 0.5,\n            polygonStrokeColor: color,\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });\n    });"
      },
      {
        "id": 22,
        "title": "Highlight selected location if any",
        "summary": "if (selectedLocationId) {",
        "code": "mapsIndoorsInstance.setDisplayRule(selectedLocationId, {\n            polygonVisible: true,\n            polygonFillOpacity: 0.8,\n            polygonStrokeOpacity: 1,\n            polygonStrokeWidth: 3,\n            zoomFrom: 16\n        });\n    }\n}"
      },
      {
        "id": 23,
        "title": "Set a custom icon for specific locations",
        "summary": "mapsIndoorsInstance.setDisplayRule(locationIds, {",
        "code": "function setCustomIcons(locationIds, iconUrl, size = 32) {\n        iconVisible: true,\n        iconUrl: iconUrl,\n        iconSize: {\n            width: size,\n            height: size\n        },\n        zoomFrom: 15\n    });\n}"
      },
      {
        "id": 24,
        "title": "Hide specific location types",
        "summary": "",
        "code": "function hideLocations(typeOrIds) {\n    const ids = Array.isArray(typeOrIds) ? typeOrIds : null;\n    const type = !ids ? typeOrIds : null;\n    \n    if (ids) {"
      },
      {
        "id": 25,
        "title": "Hide specific location IDs",
        "summary": "mapsIndoorsInstance.setDisplayRule(ids, {",
        "code": "visible: false\n        });\n    } else if (type) {"
      },
      {
        "id": 26,
        "title": "Find all locations of this type",
        "summary": "mapsindoors.services.LocationsService.getLocations({",
        "code": "types: [type],\n            take: 1000\n        }).then(locations => {\n            const locationIds = locations.map(loc => loc.id);\n            mapsIndoorsInstance.setDisplayRule(locationIds, {\n                visible: false\n            });\n        });\n    }\n}\nRoutes and Directions"
      },
      {
        "id": 27,
        "title": "Implement navigation features",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 28,
        "title": "Initialize directions services",
        "summary": "mapsIndoors: mapsIndoorsInstance,",
        "code": "const miDirectionsService = new mapsindoors.services.DirectionsService();\nconst miDirectionsRenderer = new mapsindoors.directions.DirectionsRenderer({\n    fitBounds: true,\n    fitBoundsPadding: 100\n});"
      },
      {
        "id": 29,
        "title": "For external routing with Mapbox",
        "summary": "return new mapsindoors.services.DirectionsService(externalDirectionsProvider);",
        "code": "function initializeExternalRouting(mapboxToken) {\n    const externalDirectionsProvider = new mapsindoors.directions.MapboxProvider(mapboxToken);\n}"
      },
      {
        "id": 30,
        "title": "Calculate a route between two points",
        "summary": "async function calculateRoute(origin, destination, waypoints = []) {",
        "code": "try {\n        const routeRequest = {\n            origin: origin, // {lat, lng, floor}\n            destination: destination, // {lat, lng, floor}\n            stops: waypoints, // Array of {lat, lng, floor}\n            optimize: waypoints.length > 0 // Optimize if waypoints exist\n        };\n        \n        const routeResult = await miDirectionsService.getRoute(routeRequest);\n        \n        if (!routeResult || !routeResult.legs || routeResult.legs.length === 0) {\n            throw new Error('No valid route found');\n        }"
      },
      {
        "id": 31,
        "title": "Display the route",
        "summary": "miDirectionsRenderer.setRoute(routeResult);",
        "code": ""
      },
      {
        "id": 32,
        "title": "Return the route for further processing",
        "summary": "return routeResult;",
        "code": "} catch (error) {\n        console.error('Error calculating route:', error);\n        return null;\n    }\n}"
      },
      {
        "id": 33,
        "title": "Find exits and calculate evacuation routes",
        "summary": "async function findExitRoutes(startLocationId) {",
        "code": "try {"
      },
      {
        "id": 34,
        "title": "Find exits/stairs/entrances",
        "summary": "types: ['Stairs', 'Elevator', 'Entrance', 'Exit'],",
        "code": "const exitLocations = await mapsindoors.services.LocationsService.getLocations({\n            venue: 'YOUR_VENUE_ID',\n            take: 10\n        });\n        \n        if (exitLocations.length === 0) {\n            throw new Error('No exit locations found');\n        }\n        \n        if (startLocationId) {\n            const startLocation = await mapsindoors.services.LocationsService.getLocation(startLocationId);\n            if (!startLocation) {\n                throw new Error('Start location not found');\n            }"
      },
      {
        "id": 35,
        "title": "Find nearest exit",
        "summary": "let nearestExit = exitLocations[0];",
        "code": "let minDistance = Infinity;\n            \n            exitLocations.forEach(exit => {\n                const dx = exit.properties.anchor.coordinates[0] - startLocation.properties.anchor.coordinates[0];\n                const dy = exit.properties.anchor.coordinates[1] - startLocation.properties.anchor.coordinates[1];\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                \n                if (distance < minDistance) {\n                    minDistance = distance;\n                    nearestExit = exit;\n                }\n            });"
      },
      {
        "id": 36,
        "title": "Calculate route to nearest exit",
        "summary": "return await calculateRoute(",
        "code": "{\n                    lat: startLocation.properties.anchor.coordinates[1],\n                    lng: startLocation.properties.anchor.coordinates[0],\n                    floor: startLocation.properties.floor\n                },\n                {\n                    lat: nearestExit.properties.anchor.coordinates[1],\n                    lng: nearestExit.properties.anchor.coordinates[0],\n                    floor: nearestExit.properties.floor\n                }\n            );\n        } else {"
      },
      {
        "id": 37,
        "title": "Just return exits without calculating routes",
        "summary": "return exitLocations;",
        "code": "}\n    } catch (error) {\n        console.error('Error finding exit routes:', error);\n        return null;\n    }\n}"
      },
      {
        "id": 38,
        "title": "Find points of interest along a route",
        "summary": "async function findPOIsAlongRoute(route, types = [], radius = 5) {",
        "code": "if (!route || !route.legs) return [];"
      },
      {
        "id": 39,
        "title": "Initialize array to hold all coordinates",
        "summary": "",
        "code": "const pathCoordinates = new Set();"
      },
      {
        "id": 40,
        "title": "Helper function to add coordinate to set",
        "summary": "",
        "code": "const addCoordinate = (lat, lng, floor) => {"
      },
      {
        "id": 41,
        "title": "Use string representation as Set key for deduplication",
        "summary": "pathCoordinates.add(JSON.stringify({lat, lng, floor}));",
        "code": "};"
      },
      {
        "id": 42,
        "title": "Extract coordinates from route legs",
        "summary": "",
        "code": "route.legs.forEach(leg => {"
      },
      {
        "id": 43,
        "title": "1. Get coordinates from leg geometry",
        "summary": "if (leg.geometry && leg.geometry.coordinates) {",
        "code": "leg.geometry.coordinates.forEach(coord => {\n                addCoordinate(coord[1], coord[0], leg.start_location.zLevel);\n            });\n        }"
      },
      {
        "id": 44,
        "title": "2. Process each step",
        "summary": "if (leg.steps) {",
        "code": "leg.steps.forEach(step => {"
      },
      {
        "id": 45,
        "title": "Add step geometry coordinates",
        "summary": "if (step.geometry && step.geometry.coordinates) {",
        "code": "step.geometry.coordinates.forEach(coord => {\n                        addCoordinate(coord[1], coord[0], step.start_location.zLevel);\n                    });\n                }"
      },
      {
        "id": 46,
        "title": "Add step start and end locations",
        "summary": "if (step.start_location) {",
        "code": "addCoordinate(\n                        step.start_location.lat,\n                        step.start_location.lng,\n                        step.start_location.zLevel\n                    );\n                }\n                if (step.end_location) {\n                    addCoordinate(\n                        step.end_location.lat,\n                        step.end_location.lng,\n                        step.end_location.zLevel\n                    );\n                }\n            });\n        }\n    });"
      },
      {
        "id": 47,
        "title": "Convert back to array and parse JSON",
        "summary": "",
        "code": "const uniqueCoordinates = Array.from(pathCoordinates).map(coord => JSON.parse(coord));"
      },
      {
        "id": 48,
        "title": "Search for POIs along path with parallel requests",
        "summary": "mapsindoors.services.LocationsService.getLocations({",
        "code": "const foundPOIs = new Map();\n    const searchPromises = uniqueCoordinates.map(coordinate => \n            near: {\n                lat: coordinate.lat,\n                lng: coordinate.lng\n            },\n            radius: radius,\n            floor: coordinate.floor,\n            types: types,\n            take: 20\n        }).then(results => {\n            if (results && results.length > 0) {\n                results.forEach(poi => {\n                    if (!foundPOIs.has(poi.id)) {\n                        foundPOIs.set(poi.id, {\n                            id: poi.id,\n                            name: poi.properties.name,\n                            type: poi.properties.type,\n                            floor: poi.properties.floor,\n                            coordinates: {\n                                lat: poi.properties.anchor.coordinates[1],\n                                lng: poi.properties.anchor.coordinates[0]\n                            },\n                            foundAtCoordinate: coordinate\n                        });\n                    }\n                });\n            }\n            return results;\n        })\n    );\n\n    await Promise.all(searchPromises);"
      },
      {
        "id": 49,
        "title": "Convert Map to Array and sort",
        "summary": "return Array.from(foundPOIs.values())",
        "code": ".sort((a, b) => {\n            if (a.floor !== b.floor) return a.floor - b.floor;\n            return a.name.localeCompare(b.name);\n        });\n}\nCreating Heatmaps and Data Visualization\njavascript"
      },
      {
        "id": 50,
        "title": "Initialize heatmap layer",
        "summary": "",
        "code": "function initializeHeatmap(mapboxInstance) {"
      },
      {
        "id": 51,
        "title": "Add empty GeoJSON source",
        "summary": "mapboxInstance.addSource('heatmap-source', {",
        "code": "'type': 'geojson',\n        'data': {\n            'type': 'FeatureCollection',\n            'features': []\n        }\n    });"
      },
      {
        "id": 52,
        "title": "Add heatmap layer",
        "summary": "mapboxInstance.addLayer({",
        "code": "'id': 'heatmap-layer',\n        'type': 'heatmap',\n        'source': 'heatmap-source',\n        'paint': {\n            'heatmap-weight': [\n                'interpolate',\n                ['linear'],\n                ['get', 'intensity'],\n                0, 0,\n                5, 0.5,\n                10, 1\n            ],\n            'heatmap-intensity': [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                0, 1,\n                9, 3,\n                16, 5,\n                22, 10\n            ],\n            'heatmap-color': [\n                'interpolate',\n                ['linear'],\n                ['heatmap-density'],\n                0, 'rgba(33,102,172,0)',\n                0.2, 'rgb(103,169,207)',\n                0.4, 'rgb(209,229,240)',\n                0.6, 'rgb(253,219,199)',\n                0.8, 'rgb(239,138,98)',\n                1, 'rgb(178,24,43)'\n            ],\n            'heatmap-radius': [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                0, 2,\n                9, 10,\n                16, 20,\n                22, 30\n            ],\n            'heatmap-opacity': 0.8\n        }\n    });\n}"
      },
      {
        "id": 53,
        "title": "Update heatmap with new data",
        "summary": "",
        "code": "function updateHeatmap(data, selectedHour = null, colorPalette = 'default') {"
      },
      {
        "id": 54,
        "title": "Filter data by hour if needed",
        "summary": "",
        "code": "const filteredData = selectedHour !== null\n        ? data.filter(feature => feature.properties.Hour === selectedHour)\n        : data;"
      },
      {
        "id": 55,
        "title": "Map to GeoJSON format",
        "summary": "type: \"FeatureCollection\",",
        "code": "const geojsonData = {\n        features: filteredData.map(point => ({\n            type: \"Feature\",\n            properties: {\n                intensity: point.properties.intensity || 1\n            },\n            geometry: {\n                coordinates: [point.geometry.coordinates[0], point.geometry.coordinates[1]],\n                type: \"Point\"\n            }\n        }))\n    };"
      },
      {
        "id": 56,
        "title": "Color palettes",
        "summary": "'rgba(0, 0, 255, 0)',",
        "code": "const colorPalettes = {\n        default: [\n            'royalblue',\n            'cyan',\n            'lime',\n            'yellow',\n            'red'\n        ],\n        sunset: [\n            'rgba(255, 255, 0, 0)',\n            'yellow',\n            'orange',\n            'red',\n            'purple',\n            'darkblue'\n        ],\n        forest: [\n            'rgba(255, 255, 255, 0)',\n            'lightgreen',\n            'green',\n            'darkgreen',\n            'brown',\n            'black'\n        ],\n        ocean: [\n            'rgba(255, 255, 255, 0)',\n            'lightskyblue',\n            'deepskyblue',\n            'blue',\n            'navy',\n            'midnightblue'\n        ]\n    };"
      },
      {
        "id": 57,
        "title": "Update the source data",
        "summary": "mapboxInstance.getSource('heatmap-source').setData(geojsonData);",
        "code": ""
      },
      {
        "id": 58,
        "title": "Update the color palette if specified",
        "summary": "if (colorPalette in colorPalettes) {",
        "code": "mapboxInstance.setPaintProperty('heatmap-layer', 'heatmap-color', [\n            'interpolate',\n            ['linear'],\n            ['heatmap-density'],\n            0, colorPalettes[colorPalette][0],\n            0.1, colorPalettes[colorPalette][1],\n            0.3, colorPalettes[colorPalette][2],\n            0.5, colorPalettes[colorPalette][3],\n            0.7, colorPalettes[colorPalette][4],\n            1, colorPalettes[colorPalette][5]\n        ]);\n    }\n}"
      },
      {
        "id": 59,
        "title": "Generate simulated occupancy data for a section",
        "summary": "",
        "code": "function generateSectionData(centerLat, centerLng, seatsInSection = 500) {\n    const coordinates = [];"
      },
      {
        "id": 60,
        "title": "Section configuration",
        "summary": "",
        "code": "const rows = 25;  // Number of rows in section\n    const seatsPerRow = Math.ceil(seatsInSection / rows);  // Around 20 seats per row"
      },
      {
        "id": 61,
        "title": "Seat and row dimensions (in degrees)",
        "summary": "",
        "code": "const seatWidth = 0.0000054;  // About 0.6m\n    const seatDepth = 0.0000054;  // About 0.6m\n    const rowSpacing = seatDepth * 1.2;  // Add 20% for legroom"
      },
      {
        "id": 62,
        "title": "Section arc parameters",
        "summary": "for (let row = 0; row < rows; row++) {",
        "code": "const arcRadiusStart = 0.0004;  // Initial radius for first row\n    const arcWidthDegrees = 30;  // Width of the section in degrees"
      },
      {
        "id": 63,
        "title": "Increase radius for each row to create stadium-style tiering",
        "summary": "",
        "code": "const currentRadius = arcRadiusStart + (row * rowSpacing);"
      },
      {
        "id": 64,
        "title": "Calculate seats in this row",
        "summary": "for (let seat = 0; seat < seatsPerRow; seat++) {",
        "code": "if (coordinates.length >= seatsInSection) {\n                break;\n            }"
      },
      {
        "id": 65,
        "title": "Calculate angle for this seat",
        "summary": "",
        "code": "const angle = (Math.PI/180) * (-arcWidthDegrees/2 + (arcWidthDegrees * seat / seatsPerRow));"
      },
      {
        "id": 66,
        "title": "Calculate seat position",
        "summary": "coordinates.push({",
        "code": "const lat = centerLat + (currentRadius * Math.cos(angle));\n            const lng = centerLng + (currentRadius * Math.sin(angle));\n            \n                latitude: lat,\n                longitude: lng\n            });\n        }\n    }\n    \n    return coordinates;\n}\nLive Position Tracking and Moving Markers\njavascript"
      },
      {
        "id": 67,
        "title": "Initialize position tracking with draggable markers",
        "summary": "let markers = {};",
        "code": "function initMovingMarkers(mapboxInstance, buildingOutline) {\n    let floorAssetCounts = {};\n    let currentFloor = null;\n    let selectedMarkerId = null;"
      },
      {
        "id": 68,
        "title": "Create a GeoJSON source for path visualization",
        "summary": "mapboxInstance.addSource('path-source', {",
        "code": "type: 'geojson',\n        data: {\n            type: 'Feature',\n            properties: {},\n            geometry: {\n                type: 'LineString',\n                coordinates: []\n            }\n        }\n    });"
      },
      {
        "id": 69,
        "title": "Add path layer",
        "summary": "mapboxInstance.addLayer({",
        "code": "id: 'path-layer',\n        type: 'line',\n        source: 'path-source',\n        layout: {\n            'line-join': 'round',\n            'line-cap': 'round'\n        },\n        paint: {\n            'line-color': '#4CAF50',\n            'line-width': 3,\n            'line-opacity': 0.8\n        }\n    });"
      },
      {
        "id": 70,
        "title": "Helper function to check if a point is inside a polygon",
        "summary": "let inside = false;",
        "code": "function isPointInPolygon(point, polygon) {\n        for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n            const xi = polygon[i][0], yi = polygon[i][1];\n            const xj = polygon[j][0], yj = polygon[j][1];\n            \n            const intersect = ((yi > point[1]) !== (yj > point[1]))\n                && (point[0] < (xj - xi) * (point[1] - yi) / (yj - yi) + xi);\n            if (intersect) inside = !inside;\n        }\n        return inside;\n    }"
      },
      {
        "id": 71,
        "title": "Function to get a point within radius but constrained to building",
        "summary": "if (currentDistance <= maxDistance) {",
        "code": "function getPointWithinRadius(currentPoint, targetPoint, radiusFeet) {\n        const FEET_TO_DEGREES = 0.0000003048;\n        const maxDistance = radiusFeet * FEET_TO_DEGREES;\n\n        const dx = targetPoint[0] - currentPoint[0];\n        const dy = targetPoint[1] - currentPoint[1];\n\n        const currentDistance = Math.sqrt(dx * dx + dy * dy);\n\n            return targetPoint;\n        }\n\n        const ratio = maxDistance / currentDistance;\n        const newPoint = [\n            currentPoint[0] + dx * ratio,\n            currentPoint[1] + dy * ratio\n        ];\n\n        if (!isPointInPolygon(newPoint, buildingOutline)) {\n            return currentPoint;\n        }\n\n        return newPoint;\n    }"
      },
      {
        "id": 72,
        "title": "Function to get random point within building",
        "summary": "",
        "code": "function getRandomPointInBuilding() {"
      },
      {
        "id": 73,
        "title": "Compute bounding box",
        "summary": "minLng: Math.min(...lngs),",
        "code": "const lngs = buildingOutline.map(p => p[0]);\n        const lats = buildingOutline.map(p => p[1]);\n        const bounds = {\n            maxLng: Math.max(...lngs),\n            minLat: Math.min(...lats),\n            maxLat: Math.max(...lats)\n        };\n        \n        let point;\n        let attempts = 0;\n        const maxAttempts = 100;\n        \n        do {\n            const lng = Math.random() * (bounds.maxLng - bounds.minLng) + bounds.minLng;\n            const lat = Math.random() * (bounds.maxLat - bounds.minLat) + bounds.minLat;\n            point = [lng, lat];\n            attempts++;\n            \n            if (attempts > maxAttempts) {\n                console.warn(\"Failed to find point in building after max attempts\");\n                return [bounds.minLng, bounds.minLat];\n            }\n        } while (!isPointInPolygon(point, buildingOutline));\n        \n        return point;\n    }"
      },
      {
        "id": 74,
        "title": "Create a new marker",
        "summary": "if (!point) return null;",
        "code": "function createMarker(floor) {\n        const assetId = Math.floor(Math.random() * 900 + 100).toString();\n        const point = getRandomPointInBuilding();\n        \n        \n        const marker = new mapboxgl.Marker()\n            .setLngLat(point)\n            .addTo(mapboxInstance);\n            \n        const popup = new mapboxgl.Popup({\n            closeButton: true,\n            closeOnClick: false\n        });\n        \n        const markerId = Date.now().toString();\n        marker.markerId = markerId;\n        \n        markers[markerId] = {\n            marker: marker,\n            floor: floor,\n            coordinates: point,\n            originalCoordinates: [...point],\n            assetId: assetId,\n            lastUpdate: new Date(),\n            targetPoint: getRandomPointInBuilding(),\n            popup: popup,\n            positions: [point]  // Store path history\n        };"
      },
      {
        "id": 75,
        "title": "Click handler for selection",
        "summary": "e.stopPropagation();",
        "code": "marker.getElement().addEventListener('click', (e) => {\n            selectMarker(markerId);\n        });"
      },
      {
        "id": 76,
        "title": "Start random movement",
        "summary": "startRandomMovement(markerId);",
        "code": "return markerId;\n    }"
      },
      {
        "id": 77,
        "title": "Start random movement for a marker",
        "summary": "if (!marker) return;",
        "code": "function startRandomMovement(markerId) {\n        const marker = markers[markerId];\n\n        if (!marker.targetPoint) {\n            marker.targetPoint = getRandomPointInBuilding();\n        }\n\n        const moveMarker = async () => {\n            if (!markers[markerId]) return;\n            const marker = markers[markerId];\n\n            const newPoint = getPointWithinRadius(marker.coordinates, marker.targetPoint, 20);\n            const dx = marker.targetPoint[0] - newPoint[0];\n            const dy = marker.targetPoint[1] - newPoint[1];\n            const distanceToTarget = Math.sqrt(dx * dx + dy * dy);\n\n            if (distanceToTarget < 0.0000001) {\n                marker.targetPoint = getRandomPointInBuilding();\n            }\n\n            marker.marker.setLngLat(newPoint);\n            marker.coordinates = newPoint;\n            marker.positions.push([...newPoint]);\n            marker.lastUpdate = new Date();"
      },
      {
        "id": 78,
        "title": "Update path line if this marker is selected",
        "summary": "if (selectedMarkerId === markerId) {",
        "code": "mapboxInstance.getSource('path-source').setData({\n                    type: 'Feature',\n                    properties: {},\n                    geometry: {\n                        type: 'LineString',\n                        coordinates: marker.positions\n                    }\n                });\n            }"
      },
      {
        "id": 79,
        "title": "Update popup if open",
        "summary": "if (marker.popup.isOpen()) {",
        "code": "updateMarkerPopup(markerId);\n            }\n\n            const delay = Math.random() * 5000 + 2000;\n            setTimeout(moveMarker, delay);\n        };\n\n        const initialDelay = Math.random() * 5000 + 2000;\n        setTimeout(moveMarker, initialDelay);\n    }"
      },
      {
        "id": 80,
        "title": "Select a marker",
        "summary": "",
        "code": "function selectMarker(markerId) {"
      },
      {
        "id": 81,
        "title": "Deselect if clicking the same marker",
        "summary": "if (selectedMarkerId === markerId) {",
        "code": "markers[markerId].popup.remove();"
      },
      {
        "id": 82,
        "title": "Clear path line",
        "summary": "mapboxInstance.getSource('path-source').setData({",
        "code": "type: 'Feature',\n                properties: {},\n                geometry: {\n                    type: 'LineString',\n                    coordinates: []\n                }\n            });\n            \n            selectedMarkerId = null;\n            return;\n        }"
      },
      {
        "id": 83,
        "title": "Reset previous selected marker",
        "summary": "if (selectedMarkerId && markers[selectedMarkerId]) {",
        "code": "markers[selectedMarkerId].popup.remove();"
      },
      {
        "id": 84,
        "title": "Clear previous path line",
        "summary": "mapboxInstance.getSource('path-source').setData({",
        "code": "type: 'Feature',\n                properties: {},\n                geometry: {\n                    type: 'LineString',\n                    coordinates: []\n                }\n            });\n        }"
      },
      {
        "id": 85,
        "title": "Set new selection",
        "summary": "selectedMarkerId = markerId;",
        "code": ""
      },
      {
        "id": 86,
        "title": "Show path line for selected marker",
        "summary": "mapboxInstance.getSource('path-source').setData({",
        "code": "type: 'Feature',\n            properties: {},\n            geometry: {\n                type: 'LineString',\n                coordinates: markers[markerId].positions\n            }\n        });"
      },
      {
        "id": 87,
        "title": "Center map on marker",
        "summary": "mapboxInstance.flyTo({",
        "code": "center: markers[markerId].coordinates,\n            zoom: 20,\n            duration: 1000\n        });"
      },
      {
        "id": 88,
        "title": "Show popup",
        "summary": "updateMarkerPopup(markerId);",
        "code": "}"
      },
      {
        "id": 89,
        "title": "Update marker popup content",
        "summary": "async function updateMarkerPopup(markerId) {",
        "code": "if (!markers[markerId]) return;\n        \n        const marker = markers[markerId];"
      },
      {
        "id": 90,
        "title": "Find nearest POI if MapsIndoors is available",
        "summary": "let nearestPOI = null;",
        "code": "if (window.mapsindoors && mapsindoors.services.LocationsService) {\n            try {\n                const nearbyLocations = await mapsindoors.services.LocationsService.getLocations({\n                    near: {\n                        lat: marker.coordinates[1],\n                        lng: marker.coordinates[0]\n                    },\n                    radius: 5,\n                    floor: marker.floor,\n                    take: 1\n                });\n                \n                if (nearbyLocations && nearbyLocations.length > 0) {\n                    nearestPOI = nearbyLocations[0];\n                }\n            } catch (e) {\n                console.warn('Error finding nearest POI:', e);\n            }\n        }"
      },
      {
        "id": 91,
        "title": "Format last updated time",
        "summary": "let timeText = `${Math.floor(timeSince)}s ago`;",
        "code": "const timeSince = ((new Date()) - marker.lastUpdate) / 1000;\n        if (timeSince > 60) {\n            timeText = `${Math.floor(timeSince / 60)}m ago`;\n        }"
      },
      {
        "id": 92,
        "title": "Create popup content",
        "summary": "let popupContent = `",
        "code": "<div style=\"padding: 10px;\">\n                <div style=\"margin-bottom: 8px;\">\n                    <strong>Asset #${marker.assetId}</strong>\n                </div>\n                <div style=\"margin-bottom: 8px;\">\n                    Last moved: ${timeText}\n                </div>\n                <div style=\"margin-bottom: 8px;\">\n                    Floor: ${marker.floor}\n                </div>\n        `;\n\n\n\n\nContinue\n\nEdit\nI'll continue with the comprehensive MapsIndoors implementation guide.\n\nLive Position Tracking and Moving Markers (continued)\njavascript\n        if (nearestPOI) {\n            popupContent += `\n                <div>\n                    Nearest to: ${nearestPOI.properties.name}\n                </div>\n            `;\n        }\n\n        popupContent += '</div>';"
      },
      {
        "id": 93,
        "title": "Set popup content and show it",
        "summary": ".setLngLat(marker.coordinates)",
        "code": "marker.popup\n            .setHTML(popupContent)\n            .addTo(mapboxInstance);\n    }"
      },
      {
        "id": 94,
        "title": "Update marker visibility based on floor",
        "summary": "if (floor === currentFloor) {",
        "code": "function updateMarkerVisibility() {\n        Object.values(markers).forEach(({ marker, floor }) => {\n                marker.getElement().style.display = 'block';\n            } else {\n                marker.getElement().style.display = 'none';\n            }\n        });\n    }"
      },
      {
        "id": 95,
        "title": "Listen for floor changes if MapsIndoors is available",
        "summary": "if (window.mapsindoors) {",
        "code": "mapsIndoorsInstance.addListener('floor_changed', () => {\n            currentFloor = mapsIndoorsInstance.getFloor();\n            updateMarkerVisibility();\n        });\n    }"
      },
      {
        "id": 96,
        "title": "Return interface for controlling markers",
        "summary": "currentFloor = floor;",
        "code": "return {\n        createMarker,\n        selectMarker,\n        getMarkers: () => markers,\n        setCurrentFloor: (floor) => {\n            updateMarkerVisibility();\n        }\n    };\n}\nCustom UI Elements and User Interactions\njavascript"
      },
      {
        "id": 97,
        "title": "Create a custom floor selector",
        "summary": "container.style.cssText = `",
        "code": "function createCustomFloorSelector(mapsIndoorsInstance) {\n    const container = document.createElement('div');\n        position: absolute;\n        right: 20px;\n        top: 160px;\n        background-color: white;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n        border-radius: 8px;\n        overflow: hidden;\n        z-index: 100;\n    `;\n    \n    function updateFloorButtons() {"
      },
      {
        "id": 98,
        "title": "Clear existing buttons",
        "summary": "container.innerHTML = '';",
        "code": ""
      },
      {
        "id": 99,
        "title": "Get current building and floor",
        "summary": "if (!building || !building.floors) return;",
        "code": "const building = mapsIndoorsInstance.getBuilding();\n        \n        const currentFloor = mapsIndoorsInstance.getFloor();"
      },
      {
        "id": 100,
        "title": "Create buttons for each floor",
        "summary": "button.style.cssText = `",
        "code": "const floors = Object.entries(building.floors)\n            .sort(([a], [b]) => parseInt(b) - parseInt(a)); // Sort floors in descending order\n        \n        floors.forEach(([floorIndex, floorInfo]) => {\n            const button = document.createElement('button');\n                width: 40px;\n                height: 40px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                cursor: pointer;\n                border: none;\n                background: white;\n                border-bottom: 1px solid #eee;\n                font-weight: 500;\n                transition: all 0.2s ease;\n            `;\n            \n            if (floorIndex == currentFloor) {\n                button.style.backgroundColor = '#3f51b5';\n                button.style.color = 'white';\n            }\n            \n            button.textContent = floorInfo.name || floorIndex;\n            button.onclick = () => {\n                mapsIndoorsInstance.setFloor(parseInt(floorIndex));\n            };\n            container.appendChild(button);\n        });\n    }"
      },
      {
        "id": 101,
        "title": "Update floor selector when building or floor changes",
        "summary": "mapsIndoorsInstance.addListener('building_changed', updateFloorButtons);",
        "code": "mapsIndoorsInstance.addListener('floor_changed', updateFloorButtons);"
      },
      {
        "id": 102,
        "title": "Initial update",
        "summary": "setTimeout(updateFloorButtons, 1000);",
        "code": "return container;\n}"
      },
      {
        "id": 103,
        "title": "Create location detail panel",
        "summary": "panel.style.cssText = `",
        "code": "function createLocationDetailPanel() {\n    const panel = document.createElement('div');\n        position: absolute;\n        right: 20px;\n        bottom: 20px;\n        background-color: white;\n        border-radius: 8px;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n        width: 350px;\n        overflow: hidden;\n        z-index: 100;\n        opacity: 0;\n        transform: translateY(20px);\n        pointer-events: none;\n        transition: all 0.3s ease;\n    `;\n    \n    panel.innerHTML = `\n        <div style=\"background-color: #3f51b5; color: white; padding: 20px; position: relative;\">\n            <button style=\"position: absolute; right: 15px; top: 15px; color: white; background: none; border: none; cursor: pointer; font-size: 1.2rem;\">\u00d7</button>\n            <h2 style=\"margin: 0 0 5px 0; font-size: 1.3rem;\" id=\"detail-title\">Location Name</h2>\n            <div style=\"opacity: 0.8; font-size: 0.9rem;\" id=\"detail-subtitle\">Location Details</div>\n        </div>\n        <div style=\"padding: 20px;\" id=\"detail-content\">\n            <!-- Content will be dynamically added here -->\n        </div>\n        <div style=\"padding: 15px 20px; border-top: 1px solid #eee; display: flex; justify-content: flex-end; gap: 10px;\" id=\"detail-actions\">\n            <!-- Action buttons will be added here -->\n        </div>\n    `;"
      },
      {
        "id": 104,
        "title": "Close button functionality",
        "summary": "",
        "code": "panel.querySelector('button').addEventListener('click', () => {\n        hidePanel();\n    });"
      },
      {
        "id": 105,
        "title": "Helper functions to show/hide panel",
        "summary": "panel.style.opacity = '1';",
        "code": "function showPanel() {\n        panel.style.transform = 'translateY(0)';\n        panel.style.pointerEvents = 'auto';\n    }\n    \n    function hidePanel() {\n        panel.style.opacity = '0';\n        panel.style.transform = 'translateY(20px)';\n        panel.style.pointerEvents = 'none';\n    }"
      },
      {
        "id": 106,
        "title": "Update panel with location details",
        "summary": "",
        "code": "function updatePanel(location, customActions = []) {\n        const title = panel.querySelector('#detail-title');\n        const subtitle = panel.querySelector('#detail-subtitle');\n        const content = panel.querySelector('#detail-content');\n        const actions = panel.querySelector('#detail-actions');"
      },
      {
        "id": 107,
        "title": "Set title and subtitle",
        "summary": "title.textContent = location.properties.name || 'Unnamed Location';",
        "code": "subtitle.textContent = `Floor ${location.properties.floor} \u2022 ${location.properties.type || 'Location'}`;"
      },
      {
        "id": 108,
        "title": "Build content",
        "summary": "let contentHTML = '';",
        "code": ""
      },
      {
        "id": 109,
        "title": "Add description if available",
        "summary": "if (location.properties.description) {",
        "code": "contentHTML += `<p style=\"margin-bottom: 15px;\">${location.properties.description}</p>`;\n        }"
      },
      {
        "id": 110,
        "title": "Add other details",
        "summary": "contentHTML += `",
        "code": "<div style=\"margin-bottom: 15px;\">\n                <h3 style=\"font-size: 0.95rem; margin-bottom: 10px; color: #555;\">Details</h3>\n                <div style=\"display: grid; grid-template-columns: repeat(2, 1fr); gap: 8px; font-size: 0.9rem;\">\n                    <div style=\"display: flex; align-items: center; gap: 8px;\">\n                        <i class=\"fas fa-map-marker-alt\" style=\"width: 16px; color: #666;\"></i>\n                        <span>Floor ${location.properties.floor}</span>\n                    </div>\n                    <div style=\"display: flex; align-items: center; gap: 8px;\">\n                        <i class=\"fas fa-building\" style=\"width: 16px; color: #666;\"></i>\n                        <span>${location.properties.building || 'Main Building'}</span>\n                    </div>\n                    <div style=\"display: flex; align-items: center; gap: 8px;\">\n                        <i class=\"fas fa-tag\" style=\"width: 16px; color: #666;\"></i>\n                        <span>${location.properties.type || 'Location'}</span>\n                    </div>\n                </div>\n            </div>\n        `;"
      },
      {
        "id": 111,
        "title": "Set content",
        "summary": "content.innerHTML = contentHTML;",
        "code": ""
      },
      {
        "id": 112,
        "title": "Set action buttons",
        "summary": "actions.innerHTML = '';",
        "code": "customActions.forEach(action => {\n            const button = document.createElement('button');\n            button.style.cssText = `\n                padding: 8px 16px;\n                border: none;\n                border-radius: 4px;\n                font-weight: 500;\n                font-size: 0.9rem;\n                cursor: pointer;\n                display: inline-flex;\n                align-items: center;\n                gap: 6px;\n                color: ${action.type === 'primary' ? 'white' : '#333'};\n                background-color: ${action.type === 'primary' ? '#3f51b5' : '#e0e0e0'};\n            `;"
      },
      {
        "id": 113,
        "title": "Add icon if provided",
        "summary": "if (action.icon) {",
        "code": "button.innerHTML = `<i class=\"${action.icon}\"></i>`;\n            }"
      },
      {
        "id": 114,
        "title": "Add text",
        "summary": "button.innerHTML += action.text;",
        "code": ""
      },
      {
        "id": 115,
        "title": "Add click handler",
        "summary": "if (action.onClick) {",
        "code": "button.addEventListener('click', () => action.onClick(location));\n            }\n            \n            actions.appendChild(button);\n        });"
      },
      {
        "id": 116,
        "title": "Show panel",
        "summary": "show: showPanel,",
        "code": "showPanel();\n    }\n    \n    return {\n        element: panel,\n        hide: hidePanel,\n        update: updatePanel\n    };\n}"
      },
      {
        "id": 117,
        "title": "Create search and filtering UI",
        "summary": "container.style.cssText = `",
        "code": "function createSearchUI(onSearch, onFilter) {\n    const container = document.createElement('div');\n        position: absolute;\n        top: 20px;\n        left: 20px;\n        background-color: white;\n        border-radius: 8px;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n        width: 300px;\n        padding: 15px;\n        z-index: 100;\n    `;\n    \n    container.innerHTML = `\n        <div style=\"position: relative; margin-bottom: 15px;\">\n            <input type=\"text\" placeholder=\"Search locations...\" style=\"width: 100%; padding: 10px 15px 10px 35px; border: 1px solid #ddd; border-radius: 4px; font-size: 0.9rem;\">\n            <i class=\"fas fa-search\" style=\"position: absolute; left: 12px; top: 12px; color: #666;\"></i>\n        </div>\n        <div style=\"margin-bottom: 10px; font-weight: 500; font-size: 0.9rem;\">Filter by Type</div>\n        <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 15px;\">\n            <button class=\"filter-btn active\" data-filter=\"all\" style=\"padding: 6px 12px; border: 1px solid #ddd; border-radius: 16px; background: white; font-size: 0.8rem; cursor: pointer;\">All</button>\n            <button class=\"filter-btn\" data-filter=\"MeetingRoom\" style=\"padding: 6px 12px; border: 1px solid #ddd; border-radius: 16px; background: white; font-size: 0.8rem; cursor: pointer;\">Meeting Rooms</button>\n            <button class=\"filter-btn\" data-filter=\"Office\" style=\"padding: 6px 12px; border: 1px solid #ddd; border-radius: 16px; background: white; font-size: 0.8rem; cursor: pointer;\">Offices</button>\n            <button class=\"filter-btn\" data-filter=\"Restroom\" style=\"padding: 6px 12px; border: 1px solid #ddd; border-radius: 16px; background: white; font-size: 0.8rem; cursor: pointer;\">Restrooms</button>\n            <button class=\"filter-btn\" data-filter=\"Exit\" style=\"padding: 6px 12px; border: 1px solid #ddd; border-radius: 16px; background: white; font-size: 0.8rem; cursor: pointer;\">Exits</button>\n        </div>\n    `;"
      },
      {
        "id": 118,
        "title": "Set active class for filter buttons",
        "summary": "",
        "code": "const filterButtons = container.querySelectorAll('.filter-btn');\n    filterButtons.forEach(button => {\n        button.addEventListener('click', () => {"
      },
      {
        "id": 119,
        "title": "Remove active class from all buttons",
        "summary": "",
        "code": "filterButtons.forEach(btn => btn.classList.remove('active'));"
      },
      {
        "id": 120,
        "title": "Add active class to clicked button",
        "summary": "",
        "code": "button.classList.add('active');"
      },
      {
        "id": 121,
        "title": "Call filter callback",
        "summary": "onFilter(button.dataset.filter);",
        "code": "if (onFilter) {\n            }\n        });\n    });"
      },
      {
        "id": 122,
        "title": "Search input handling",
        "summary": "onSearch(e.target.value);",
        "code": "const searchInput = container.querySelector('input');\n    searchInput.addEventListener('input', (e) => {\n        if (onSearch) {\n        }\n    });\n    \n    return container;\n}"
      },
      {
        "id": 123,
        "title": "Create a toast notification",
        "summary": "toast.style.cssText = `",
        "code": "function createToast(message, type = 'info', duration = 3000) {\n    const toast = document.createElement('div');\n        position: fixed;\n        bottom: 20px;\n        left: 50%;\n        transform: translateX(-50%) translateY(100px);\n        background-color: white;\n        border-radius: 4px;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n        padding: 12px 20px;\n        font-size: 0.9rem;\n        display: flex;\n        align-items: center;\n        gap: 10px;\n        z-index: 9999;\n        transition: transform 0.3s ease;\n    `;"
      },
      {
        "id": 124,
        "title": "Set color and icon based on type",
        "summary": "let icon, color;",
        "code": "switch (type) {"
      },
      {
        "id": 125,
        "title": "case 'success'",
        "summary": "icon = 'fas fa-check-circle';",
        "code": "color = '#4caf50';\n            break;"
      },
      {
        "id": 126,
        "title": "case 'error'",
        "summary": "icon = 'fas fa-exclamation-circle';",
        "code": "color = '#f44336';\n            break;"
      },
      {
        "id": 127,
        "title": "case 'warning'",
        "summary": "icon = 'fas fa-exclamation-triangle';",
        "code": "color = '#ff9800';\n            break;"
      },
      {
        "id": 128,
        "title": "default",
        "summary": "icon = 'fas fa-info-circle';",
        "code": "color = '#2196f3';\n    }\n    \n    toast.innerHTML = `\n        <i class=\"${icon}\" style=\"color: ${color};\"></i>\n        <span>${message}</span>\n    `;\n    \n    document.body.appendChild(toast);"
      },
      {
        "id": 129,
        "title": "Animate in",
        "summary": "toast.style.transform = 'translateX(-50%) translateY(0)';",
        "code": "setTimeout(() => {\n    }, 10);"
      },
      {
        "id": 130,
        "title": "Animate out and remove",
        "summary": "toast.style.transform = 'translateX(-50%) translateY(100px)';",
        "code": "setTimeout(() => {\n        setTimeout(() => {\n            document.body.removeChild(toast);\n        }, 300);\n    }, duration);\n}\nWorking with Building and Room Statuses\njavascript"
      },
      {
        "id": 131,
        "title": "Set up a room booking status system",
        "summary": "",
        "code": "function initializeRoomStatusSystem(mapsIndoorsInstance, roomList) {"
      },
      {
        "id": 132,
        "title": "Status colors",
        "summary": "'available': '#4CAF50', // Green",
        "code": "const statusColors = {\n        'occupied': '#F44336', // Red\n        'maintenance': '#FF9800', // Orange\n        'reserved': '#2196F3' // Blue\n    };"
      },
      {
        "id": 133,
        "title": "Update room status in data and on map",
        "summary": "",
        "code": "function updateRoomStatus(roomId, status) {"
      },
      {
        "id": 134,
        "title": "Find room in list",
        "summary": "if (roomIndex === -1) return false;",
        "code": "const roomIndex = roomList.findIndex(room => room.id === roomId);"
      },
      {
        "id": 135,
        "title": "Update status",
        "summary": "roomList[roomIndex].status = status;",
        "code": "roomList[roomIndex].lastUpdated = new Date();"
      },
      {
        "id": 136,
        "title": "Update display rule for this room",
        "summary": "mapsIndoorsInstance.setDisplayRule(roomId, {",
        "code": "const color = statusColors[status] || statusColors.available;\n            polygonVisible: true,\n            polygonFillColor: color,\n            polygonFillOpacity: 0.5,\n            polygonStrokeColor: color,\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });\n        \n        return true;\n    }"
      },
      {
        "id": 137,
        "title": "Check if room is available at a specific time",
        "summary": "if (!room || !room.bookings) return true; // Default to available if no booking data",
        "code": "function isRoomAvailableAt(roomId, timestamp) {\n        const room = roomList.find(room => room.id === roomId);"
      },
      {
        "id": 138,
        "title": "Check if there's an overlap with any booking",
        "summary": "return timestamp >= booking.startTime && timestamp < booking.endTime;",
        "code": "return !room.bookings.some(booking => {\n        });\n    }"
      },
      {
        "id": 139,
        "title": "Get room availability for a day",
        "summary": "if (!room || !room.bookings) {",
        "code": "function getRoomAvailabilityForDay(roomId, date) {\n        const room = roomList.find(room => room.id === roomId);"
      },
      {
        "id": 140,
        "title": "Return all slots as available if no booking data",
        "summary": "status: 'available'",
        "code": "return generateTimeSlots(date).map(slot => ({\n                ...slot,\n            }));\n        }"
      },
      {
        "id": 141,
        "title": "Generate time slots for the day (e.g., 30-minute increments)",
        "summary": "",
        "code": "const slots = generateTimeSlots(date);"
      },
      {
        "id": 142,
        "title": "Mark slots as occupied if they overlap with bookings",
        "summary": "return slot.startTime >= booking.startTime && slot.startTime < booking.endTime;",
        "code": "return slots.map(slot => {\n            const isOccupied = room.bookings.some(booking => {\n            });\n            \n            return {\n                ...slot,\n                status: isOccupied ? 'occupied' : 'available'\n            };\n        });\n    }"
      },
      {
        "id": 143,
        "title": "Helper to generate time slots for a day",
        "summary": "startDate.setHours(8, 0, 0, 0); // Start at 8 AM",
        "code": "function generateTimeSlots(date, increment = 30) {\n        const slots = [];\n        const startDate = new Date(date);\n        \n        const endDate = new Date(date);\n        endDate.setHours(18, 0, 0, 0); // End at 6 PM\n        \n        while (startDate < endDate) {\n            const endSlot = new Date(startDate);\n            endSlot.setMinutes(startDate.getMinutes() + increment);\n            \n            slots.push({\n                startTime: new Date(startDate),\n                endTime: new Date(endSlot),\n                label: startDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n            });\n            \n            startDate.setMinutes(startDate.getMinutes() + increment);\n        }\n        \n        return slots;\n    }"
      },
      {
        "id": 144,
        "title": "Book a room",
        "summary": "if (!room) return { success: false, message: 'Room not found' };",
        "code": "function bookRoom(roomId, startTime, endTime, userId, purpose) {\n        const room = roomList.find(room => room.id === roomId);"
      },
      {
        "id": 145,
        "title": "Initialize bookings array if not exists",
        "summary": "if (!room.bookings) {",
        "code": "room.bookings = [];\n        }"
      },
      {
        "id": 146,
        "title": "Check for conflicts",
        "summary": "return (startTime < booking.endTime && endTime > booking.startTime);",
        "code": "const hasConflict = room.bookings.some(booking => {\n        });\n        \n        if (hasConflict) {\n            return { success: false, message: 'Time slot is already booked' };\n        }"
      },
      {
        "id": 147,
        "title": "Add new booking",
        "summary": "createdAt: new Date()",
        "code": "const bookingId = Date.now().toString();\n        const booking = {\n            id: bookingId,\n            roomId,\n            startTime,\n            endTime,\n            userId,\n            purpose,\n        };\n        \n        room.bookings.push(booking);"
      },
      {
        "id": 148,
        "title": "Update room status if booking is current",
        "summary": "if (now >= startTime && now < endTime) {",
        "code": "const now = new Date();\n            updateRoomStatus(roomId, 'occupied');\n        }\n        \n        return { success: true, booking };\n    }"
      },
      {
        "id": 149,
        "title": "Cancel a booking",
        "summary": "if (!room || !room.bookings) return false;",
        "code": "function cancelBooking(roomId, bookingId) {\n        const room = roomList.find(room => room.id === roomId);\n        \n        const initialLength = room.bookings.length;\n        room.bookings = room.bookings.filter(booking => booking.id !== bookingId);"
      },
      {
        "id": 150,
        "title": "Check if any booking was removed",
        "summary": "if (room.bookings.length === initialLength) {",
        "code": "return false;\n        }"
      },
      {
        "id": 151,
        "title": "Update room status if needed",
        "summary": "updateRoomStatusBasedOnCurrentTime(roomId);",
        "code": "return true;\n    }"
      },
      {
        "id": 152,
        "title": "Update room status based on current time and bookings",
        "summary": "if (!room) return false;",
        "code": "function updateRoomStatusBasedOnCurrentTime(roomId) {\n        const room = roomList.find(room => room.id === roomId);\n        \n        const now = new Date();"
      },
      {
        "id": 153,
        "title": "Check if room is currently booked",
        "summary": "return now >= booking.startTime && now < booking.endTime;",
        "code": "const currentBooking = room.bookings?.find(booking => {\n        });\n        \n        if (currentBooking) {\n            updateRoomStatus(roomId, 'occupied');\n        } else if (room.status === 'maintenance') {"
      },
      {
        "id": 154,
        "title": "Don't change maintenance status",
        "summary": "updateRoomStatus(roomId, 'available');",
        "code": "} else {\n        }\n        \n        return true;\n    }"
      },
      {
        "id": 155,
        "title": "Update all room statuses based on current time",
        "summary": "updateRoomStatusBasedOnCurrentTime(room.id);",
        "code": "function updateAllRoomStatuses() {\n        roomList.forEach(room => {\n        });\n    }"
      },
      {
        "id": 156,
        "title": "Return public methods",
        "summary": "updateRoomStatus,",
        "code": "return {\n        isRoomAvailableAt,\n        getRoomAvailabilityForDay,\n        bookRoom,\n        cancelBooking,\n        updateRoomStatusBasedOnCurrentTime,\n        updateAllRoomStatuses\n    };\n}\nEmergency Response and Safety Features\njavascript"
      },
      {
        "id": 157,
        "title": "Initialize emergency response system",
        "summary": "let isEmergencyActive = false;",
        "code": "function initializeEmergencySystem(mapsIndoorsInstance, roomsData) {\n    let activeEmergencyType = null;"
      },
      {
        "id": 158,
        "title": "Emergency status colors",
        "summary": "'safe': '#4caf50',",
        "code": "const statusColors = {\n        'unsafe': '#f44336',\n        'unresponsive': '#9e9e9e',\n        'cleared': '#2196f3',\n        'lockdown': '#ff9800',\n        'normal': '#4caf50'\n    };"
      },
      {
        "id": 159,
        "title": "Activate emergency",
        "summary": "if (isEmergencyActive) {",
        "code": "function activateEmergency(type) {\n            return false;\n        }\n        \n        isEmergencyActive = true;\n        activeEmergencyType = type;"
      },
      {
        "id": 160,
        "title": "Reset room statuses for emergency",
        "summary": "room.status = 'unresponsive';",
        "code": "roomsData.forEach(room => {\n            room.lastUpdated = null;\n        });"
      },
      {
        "id": 161,
        "title": "Set all rooms to lockdown color",
        "summary": "mapsIndoorsInstance.setDisplayRule(allRoomIds, {",
        "code": "const allRoomIds = roomsData.map(room => room.id);\n            polygonVisible: true,\n            polygonFillColor: statusColors.lockdown,\n            polygonFillOpacity: 0.5,\n            polygonStrokeColor: statusColors.lockdown,\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });\n        \n        return true;\n    }"
      },
      {
        "id": 162,
        "title": "Deactivate emergency",
        "summary": "if (!isEmergencyActive) {",
        "code": "function deactivateEmergency() {\n            return false;\n        }\n        \n        isEmergencyActive = false;"
      },
      {
        "id": 163,
        "title": "Set all rooms back to normal",
        "summary": "room.status = 'safe';",
        "code": "roomsData.forEach(room => {\n            room.lastUpdated = new Date();\n        });"
      },
      {
        "id": 164,
        "title": "Update display rules",
        "summary": "updateRoomDisplayRules();",
        "code": "return true;\n    }"
      },
      {
        "id": 165,
        "title": "Update room status",
        "summary": "if (roomIndex === -1) return false;",
        "code": "function updateRoomStatus(roomId, newStatus) {\n        const roomIndex = roomsData.findIndex(room => room.id === roomId);\n        \n        roomsData[roomIndex].status = newStatus;\n        roomsData[roomIndex].lastUpdated = new Date();"
      },
      {
        "id": 166,
        "title": "Update display rules",
        "summary": "updateRoomDisplayRules();",
        "code": "return true;\n    }"
      },
      {
        "id": 167,
        "title": "Update room display rules",
        "summary": "",
        "code": "function updateRoomDisplayRules() {"
      },
      {
        "id": 168,
        "title": "Group rooms by status",
        "summary": "",
        "code": "const safeRooms = roomsData.filter(room => room.status === 'safe').map(room => room.id);\n        const unsafeRooms = roomsData.filter(room => room.status === 'unsafe').map(room => room.id);\n        const unresponsiveRooms = roomsData.filter(room => room.status === 'unresponsive').map(room => room.id);\n        const clearedRooms = roomsData.filter(room => room.status === 'cleared').map(room => room.id);"
      },
      {
        "id": 169,
        "title": "Apply display rules for each status group",
        "summary": "mapsIndoorsInstance.setDisplayRule(safeRooms, {",
        "code": "polygonVisible: true,\n            polygonFillColor: statusColors.safe,\n            polygonFillOpacity: 0.5,\n            polygonStrokeColor: statusColors.safe,\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });\n        \n        mapsIndoorsInstance.setDisplayRule(unsafeRooms, {\n            polygonVisible: true,\n            polygonFillColor: statusColors.unsafe,\n            polygonFillOpacity: 0.5,\n            polygonStrokeColor: statusColors.unsafe,\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });\n        \n        mapsIndoorsInstance.setDisplayRule(unresponsiveRooms, {\n            polygonVisible: true,\n            polygonFillColor: statusColors.unresponsive,\n            polygonFillOpacity: 0.5,\n            polygonStrokeColor: statusColors.unresponsive,\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });\n        \n        mapsIndoorsInstance.setDisplayRule(clearedRooms, {\n            polygonVisible: true,\n            polygonFillColor: statusColors.cleared,\n            polygonFillOpacity: 0.5,\n            polygonStrokeColor: statusColors.cleared,\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });\n    }"
      },
      {
        "id": 170,
        "title": "Find evacuation routes",
        "summary": "async function findEvacuationRoutes(startLocationId) {",
        "code": "try {"
      },
      {
        "id": 171,
        "title": "Find exits/stairs",
        "summary": "types: ['Stairs', 'Elevator', 'Entrance', 'Exit'],",
        "code": "const exitLocations = await mapsindoors.services.LocationsService.getLocations({\n                venue: 'YOUR_VENUE_ID',\n                take: 10\n            });\n            \n            if (exitLocations.length === 0) {\n                throw new Error('No exit locations found');\n            }\n            \n            if (startLocationId) {\n                const startLocation = roomsData.find(room => room.id === startLocationId);\n                if (!startLocation) {\n                    throw new Error('Start location not found');\n                }"
      },
      {
        "id": 172,
        "title": "Find nearest exit",
        "summary": "let nearestExit = exitLocations[0];",
        "code": "let minDistance = Infinity;\n                \n                exitLocations.forEach(exit => {\n                    const dx = exit.properties.anchor.coordinates[0] - startLocation.location.lng;\n                    const dy = exit.properties.anchor.coordinates[1] - startLocation.location.lat;\n                    const distance = Math.sqrt(dx * dx + dy * dy);\n                    \n                    if (distance < minDistance) {\n                        minDistance = distance;\n                        nearestExit = exit;\n                    }\n                });"
      },
      {
        "id": 173,
        "title": "Calculate route",
        "summary": "lat: startLocation.location.lat,",
        "code": "const route = await miDirectionsService.getRoute({\n                    origin: {\n                        lng: startLocation.location.lng,\n                        floor: startLocation.floor\n                    },\n                    destination: {\n                        lat: nearestExit.properties.anchor.coordinates[1],\n                        lng: nearestExit.properties.anchor.coordinates[0],\n                        floor: nearestExit.properties.floor\n                    }\n                });\n                \n                return { route, exit: nearestExit };\n            } else {\n                return { exits: exitLocations };\n            }\n        } catch (error) {\n            console.error('Error finding evacuation routes:', error);\n            return null;\n        }\n    }"
      },
      {
        "id": 174,
        "title": "Get emergency status",
        "summary": "active: isEmergencyActive,",
        "code": "function getEmergencyStatus() {\n        return {\n            type: activeEmergencyType,\n            counts: {\n                safe: roomsData.filter(room => room.status === 'safe').length,\n                unsafe: roomsData.filter(room => room.status === 'unsafe').length,\n                unresponsive: roomsData.filter(room => room.status === 'unresponsive').length,\n                cleared: roomsData.filter(room => room.status === 'cleared').length,\n                total: roomsData.length\n            }\n        };\n    }\n    \n    return {\n        activateEmergency,\n        deactivateEmergency,\n        updateRoomStatus,\n        findEvacuationRoutes,\n        getEmergencyStatus,\n        isEmergencyActive: () => isEmergencyActive,\n        getActiveEmergencyType: () => activeEmergencyType\n    };\n}\nMapsIndoors API Integration and Authentication\njavascript"
      },
      {
        "id": 175,
        "title": "MapsIndoors API authentication",
        "summary": "async function authenticateMapsIndoors(username, password) {",
        "code": "try {\n        const response = await fetch('https://auth.mapsindoors.com/connect/token', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n            body: new URLSearchParams({\n                'grant_type': 'password',\n                'client_id': 'client',\n                'username': username,\n                'password': password\n            })\n        });\n        \n        if (!response.ok) {\n            throw new Error(`Authentication failed: ${response.status} ${response.statusText}`);\n        }\n        \n        const data = await response.json();\n        return data.access_token;\n    } catch (error) {\n        console.error('Authentication error:', error);\n        throw error;\n    }\n}"
      },
      {
        "id": 176,
        "title": "Get available solutions",
        "summary": "async function getAvailableSolutions(accessToken) {",
        "code": "try {"
      },
      {
        "id": 177,
        "title": "Set up the MapsIndoors Editor with your access token",
        "summary": "MapsIndoorsEditor.accessToken = accessToken;",
        "code": ""
      },
      {
        "id": 178,
        "title": "Get available solutions",
        "summary": "return availableSolutions;",
        "code": "const availableSolutions = await MapsIndoorsEditor.getAvailableSolutions();\n    } catch (error) {\n        console.error('Error getting available solutions:', error);\n        throw error;\n    }\n}"
      },
      {
        "id": 179,
        "title": "Open a solution by ID",
        "summary": "async function openSolutionById(accessToken, solutionId) {",
        "code": "try {"
      },
      {
        "id": 180,
        "title": "Set up the MapsIndoors Editor with your access token",
        "summary": "MapsIndoorsEditor.accessToken = accessToken;",
        "code": ""
      },
      {
        "id": 181,
        "title": "Open solution by ID",
        "summary": "",
        "code": "Continue\n\nEdit"
      },
      {
        "id": 182,
        "title": "I'll continue with the comprehensive MapsIndoors implementation guide",
        "summary": "MapsIndoors API Integration and Authentication (continued)",
        "code": "javascript\n        const solutionManager = await MapsIndoorsEditor.open(solutionId);\n        return solutionManager;\n    } catch (error) {\n        console.error('Error opening solution:', error);\n        throw error;\n    }\n}"
      },
      {
        "id": 183,
        "title": "Connect to existing MapsIndoors SDK instance",
        "summary": "async function connectToExistingSDK(accessToken, mapsIndoorsInstance) {",
        "code": "try {"
      },
      {
        "id": 184,
        "title": "Set up the MapsIndoors Editor with your access token",
        "summary": "MapsIndoorsEditor.accessToken = accessToken;",
        "code": ""
      },
      {
        "id": 185,
        "title": "Connect to existing MapsIndoors instance",
        "summary": "return solutionManager;",
        "code": "const solutionManager = await MapsIndoorsEditor.connect(mapsIndoorsInstance);\n    } catch (error) {\n        console.error('Error connecting to MapsIndoors SDK:', error);\n        throw error;\n    }\n}"
      },
      {
        "id": 186,
        "title": "Update a location using the MapsIndoors Editor",
        "summary": "async function updateLocation(solutionManager, locationId, updates) {",
        "code": "try {"
      },
      {
        "id": 187,
        "title": "Get location editor",
        "summary": "",
        "code": "const locationEditor = await solutionManager.getLocation(locationId);"
      },
      {
        "id": 188,
        "title": "Apply updates",
        "summary": "if (updates.type) {",
        "code": "locationEditor.setType(updates.type);\n        }\n        \n        if (updates.names) {\n            for (const [language, name] of Object.entries(updates.names)) {\n                locationEditor.setName(language, name);\n            }\n        }\n        \n        if (updates.descriptions) {\n            for (const [language, description] of Object.entries(updates.descriptions)) {\n                locationEditor.setDescription(language, description);\n            }\n        }\n        \n        if (updates.position) {\n            locationEditor.moveTo(updates.position);\n        }\n        \n        if (updates.rotation !== undefined) {\n            locationEditor.rotate(updates.rotation);\n        }"
      },
      {
        "id": 189,
        "title": "Save changes",
        "summary": "await locationEditor.save();",
        "code": "return true;\n    } catch (error) {\n        console.error('Error updating location:', error);\n        throw error;\n    }\n}"
      },
      {
        "id": 190,
        "title": "Direct integration with MapsIndoors API",
        "summary": "this.baseUrl = 'https://integration.mapsindoors.com';",
        "code": "class MapsIndoorsAPIClient {\n    constructor(bearerToken, solutionId) {\n        this.solutionId = solutionId;\n        this.headers = {\n            'Authorization': `Bearer ${bearerToken}`,\n            'Content-Type': 'application/json'\n        };\n    }"
      },
      {
        "id": 191,
        "title": "Get geodata",
        "summary": "async getGeoData() {",
        "code": "try {\n            const response = await fetch(`${this.baseUrl}/${this.solutionId}/api/geodata`, {\n                method: 'GET',\n                headers: this.headers\n            });\n            \n            if (!response.ok) {\n                throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching geodata:', error);\n            throw error;\n        }\n    }"
      },
      {
        "id": 192,
        "title": "Create new locations",
        "summary": "async createLocations(locationsData) {",
        "code": "try {\n            const response = await fetch(`${this.baseUrl}/${this.solutionId}/api/geodata`, {\n                method: 'POST',\n                headers: this.headers,\n                body: JSON.stringify(locationsData)\n            });\n            \n            if (!response.ok) {\n                throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error('Error creating locations:', error);\n            throw error;\n        }\n    }"
      },
      {
        "id": 193,
        "title": "Update existing locations",
        "summary": "async updateLocations(locationsData) {",
        "code": "try {\n            const response = await fetch(`${this.baseUrl}/${this.solutionId}/api/geodata`, {\n                method: 'PUT',\n                headers: this.headers,\n                body: JSON.stringify(locationsData)\n            });\n            \n            if (!response.ok) {\n                throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error('Error updating locations:', error);\n            throw error;\n        }\n    }"
      },
      {
        "id": 194,
        "title": "Delete locations",
        "summary": "async deleteLocations(locationIds) {",
        "code": "try {\n            const response = await fetch(`${this.baseUrl}/${this.solutionId}/api/geodata`, {\n                method: 'DELETE',\n                headers: this.headers,\n                body: JSON.stringify(locationIds)\n            });\n            \n            if (!response.ok) {\n                throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Error deleting locations:', error);\n            throw error;\n        }\n    }"
      },
      {
        "id": 195,
        "title": "Get categories",
        "summary": "async getCategories() {",
        "code": "try {\n            const response = await fetch(`${this.baseUrl}/${this.solutionId}/api/categories`, {\n                method: 'GET',\n                headers: {\n                    'accept': 'application/json'\n                }\n            });\n            \n            if (!response.ok) {\n                throw new Error(`Failed to fetch categories: ${response.status}`);\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching categories:', error);\n            throw error;\n        }\n    }\n}\nDistance Matrix and Location Services\njavascript"
      },
      {
        "id": 196,
        "title": "Use MapsIndoors Distance Matrix service",
        "summary": "async function calculateDistanceMatrix(origins, destinations, graphId) {",
        "code": "try {"
      },
      {
        "id": 197,
        "title": "Format origins and destinations for Distance Matrix service",
        "summary": "`${origin.lat},${origin.lng},${origin.floor}`",
        "code": "const formattedOrigins = origins.map(origin => \n        );\n        \n        const formattedDestinations = destinations.map(dest => \n            `${dest.lat},${dest.lng},${dest.floor}`\n        );"
      },
      {
        "id": 198,
        "title": "Calculate distance matrix",
        "summary": "graphId: graphId, // Example: 'AUSTINOFFICE_Graph'",
        "code": "const matrix = await mapsindoors.services.DistanceMatrixService.getDistanceMatrix({\n            origins: formattedOrigins,\n            destinations: formattedDestinations\n        });\n        \n        return matrix;\n    } catch (error) {\n        console.error('Error calculating distance matrix:', error);\n        throw error;\n    }\n}"
      },
      {
        "id": 199,
        "title": "Find nearest location with distance matrix",
        "summary": "async function findNearestLocationWithMatrix(origin, locations, graphId) {",
        "code": "try {"
      },
      {
        "id": 200,
        "title": "Format origin",
        "summary": "",
        "code": "const formattedOrigin = `${origin.lat},${origin.lng},${origin.floor}`;"
      },
      {
        "id": 201,
        "title": "Format destinations from locations",
        "summary": "return `${coords[1]},${coords[0]},${location.properties.floor}`;",
        "code": "const formattedDestinations = locations.map(location => {\n            const coords = location.properties.anchor.coordinates;\n        });"
      },
      {
        "id": 202,
        "title": "Get distance matrix",
        "summary": "graphId: graphId,",
        "code": "const matrix = await mapsindoors.services.DistanceMatrixService.getDistanceMatrix({\n            origins: [formattedOrigin],\n            destinations: formattedDestinations\n        });"
      },
      {
        "id": 203,
        "title": "Find nearest location",
        "summary": "let nearestIndex = 0;",
        "code": "let shortestDistance = Infinity;\n        \n        matrix.rows[0].elements.forEach((element, index) => {\n            if (element.distance.value < shortestDistance) {\n                shortestDistance = element.distance.value;\n                nearestIndex = index;\n            }\n        });\n        \n        return {\n            location: locations[nearestIndex],\n            distance: shortestDistance,\n            duration: matrix.rows[0].elements[nearestIndex].duration.value\n        };\n    } catch (error) {\n        console.error('Error finding nearest location:', error);\n        throw error;\n    }\n}"
      },
      {
        "id": 204,
        "title": "Use LocationsService near function to find nearby locations",
        "summary": "async function findLocationsNear(locationId, radius, floor, types, take = 5) {",
        "code": "try {\n        const nearbyLocations = await mapsindoors.services.LocationsService.getLocations({\n            near: `location:${locationId}`,\n            radius: radius,\n            floor: floor,\n            types: types,\n            take: take\n        });\n        \n        return nearbyLocations;\n    } catch (error) {\n        console.error('Error finding nearby locations:', error);\n        throw error;\n    }\n}\nExport and Data Visualization\njavascript"
      },
      {
        "id": 205,
        "title": "Generate and export a PNG snapshot of the current map",
        "summary": "async function exportMapAsPNG(mapboxInstance, scale = 4) {",
        "code": "const mapContainer = document.getElementById('map');\n    const originalStyle = {\n        width: mapContainer.style.width,\n        height: mapContainer.style.height\n    };\n\n    try {"
      },
      {
        "id": 206,
        "title": "Store original state",
        "summary": "",
        "code": "const originalCenter = mapboxInstance.getCenter();\n        const originalZoom = mapboxInstance.getZoom();"
      },
      {
        "id": 207,
        "title": "Calculate high-res dimensions",
        "summary": "",
        "code": "const exportWidth = window.innerWidth * scale;\n        const exportHeight = window.innerHeight * scale;"
      },
      {
        "id": 208,
        "title": "Set temporary dimensions for high-res capture",
        "summary": "mapContainer.style.width = `${exportWidth}px`;",
        "code": "mapContainer.style.height = `${exportHeight}px`;"
      },
      {
        "id": 209,
        "title": "Update map",
        "summary": "mapboxInstance.resize();",
        "code": "mapboxInstance.setCenter(originalCenter);\n        mapboxInstance.setZoom(originalZoom);"
      },
      {
        "id": 210,
        "title": "Wait for the map to stabilize",
        "summary": "",
        "code": "await new Promise(resolve => setTimeout(resolve, 2000));"
      },
      {
        "id": 211,
        "title": "Create data URL from the canvas",
        "summary": "",
        "code": "const canvas = mapboxInstance.getCanvas();\n        const dataUrl = canvas.toDataURL('image/png', 1.0);"
      },
      {
        "id": 212,
        "title": "Reset map dimensions",
        "summary": "mapContainer.style.width = originalStyle.width;",
        "code": "mapContainer.style.height = originalStyle.height;\n        mapboxInstance.resize();\n        mapboxInstance.setCenter(originalCenter);\n        mapboxInstance.setZoom(originalZoom);"
      },
      {
        "id": 213,
        "title": "Create download link",
        "summary": "a.href = dataUrl;",
        "code": "const a = document.createElement('a');\n        a.download = `mapsindoors_export_${Date.now()}.png`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        \n        return true;\n    } catch (error) {\n        console.error('Error exporting map as PNG:', error);"
      },
      {
        "id": 214,
        "title": "Reset map dimensions on error",
        "summary": "mapContainer.style.width = originalStyle.width;",
        "code": "mapContainer.style.height = originalStyle.height;\n        mapboxInstance.resize();\n        \n        throw error;\n    }\n}"
      },
      {
        "id": 216,
        "title": "Check if jsPDF is available",
        "summary": "if (typeof jsPDF !== 'function') {",
        "code": "throw new Error('jsPDF is not loaded. Please include the jsPDF library.');\n    }\n    \n    const mapContainer = document.getElementById('map');\n    const originalStyle = {\n        width: mapContainer.style.width,\n        height: mapContainer.style.height\n    };\n\n    try {"
      },
      {
        "id": 217,
        "title": "Store original state",
        "summary": "",
        "code": "const originalCenter = mapboxInstance.getCenter();\n        const originalZoom = mapboxInstance.getZoom();\n        const currentFloor = mapsIndoorsInstance.getFloor();\n        const floorName = currentFloor !== null ? `Floor_${currentFloor}` : 'Ground_Floor';"
      },
      {
        "id": 218,
        "title": "Set larger dimensions for higher quality",
        "summary": "mapContainer.style.width = `${exportWidth}px`;",
        "code": "const exportWidth = window.innerWidth * scale;\n        const exportHeight = window.innerHeight * scale;\n        mapContainer.style.height = `${exportHeight}px`;"
      },
      {
        "id": 219,
        "title": "Resize map and wait for it to settle",
        "summary": "mapboxInstance.resize();",
        "code": "mapboxInstance.setCenter(originalCenter);\n        mapboxInstance.setZoom(originalZoom);"
      },
      {
        "id": 220,
        "title": "Wait for the map to stabilize",
        "summary": "",
        "code": "await new Promise(resolve => setTimeout(resolve, 2000));"
      },
      {
        "id": 221,
        "title": "Create a data URL from the canvas",
        "summary": "",
        "code": "const canvas = mapboxInstance.getCanvas();\n        const dataUrl = canvas.toDataURL('image/jpeg', 1.0);"
      },
      {
        "id": 222,
        "title": "Create PDF",
        "summary": "orientation: 'landscape',",
        "code": "const pdf = new jsPDF({\n            unit: 'mm',\n            format: 'a4'\n        });"
      },
      {
        "id": 223,
        "title": "Set document properties",
        "summary": "pdf.setProperties({",
        "code": "title: `MapsIndoors Floor Plan - ${floorName}`,\n            subject: 'Floor Plan',\n            creator: 'MapsIndoors PDF Export Tool',\n            author: 'MapsIndoors'\n        });"
      },
      {
        "id": 224,
        "title": "Calculate dimensions to fit the page while maintaining aspect ratio",
        "summary": "",
        "code": "const pdfWidth = pdf.internal.pageSize.getWidth();\n        const pdfHeight = pdf.internal.pageSize.getHeight();\n        const imgWidth = canvas.width;\n        const imgHeight = canvas.height;\n        const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);"
      },
      {
        "id": 225,
        "title": "Center the image on the page",
        "summary": "",
        "code": "const imgX = (pdfWidth - imgWidth * ratio) / 2;\n        const imgY = (pdfHeight - imgHeight * ratio) / 2;"
      },
      {
        "id": 226,
        "title": "Add image to PDF",
        "summary": "pdf.addImage(dataUrl, 'JPEG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);",
        "code": ""
      },
      {
        "id": 227,
        "title": "Save the PDF",
        "summary": "pdf.save(`mapsindoors_floorplan_${floorName}_${Date.now()}.pdf`);",
        "code": ""
      },
      {
        "id": 228,
        "title": "Reset map dimensions",
        "summary": "mapContainer.style.width = originalStyle.width;",
        "code": "mapContainer.style.height = originalStyle.height;\n        mapboxInstance.resize();\n        mapboxInstance.setCenter(originalCenter);\n        mapboxInstance.setZoom(originalZoom);\n        \n        return true;\n    } catch (error) {\n        console.error('Error exporting map as PDF:', error);"
      },
      {
        "id": 229,
        "title": "Reset map dimensions on error",
        "summary": "mapContainer.style.width = originalStyle.width;",
        "code": "mapContainer.style.height = originalStyle.height;\n        mapboxInstance.resize();\n        \n        throw error;\n    }\n}\nWorking with External APIs and Quickbase Integration\njavascript"
      },
      {
        "id": 230,
        "title": "Quickbase API integration for work orders",
        "summary": "",
        "code": "class QuickbaseAPI {\n    constructor(hostname, token) {"
      },
      {
        "id": 231,
        "title": "Remove any protocol prefix and trailing slashes",
        "summary": "this.hostname = hostname.replace(/^https?:\\/\\//, '').replace(/\\/$/, '');",
        "code": "this.baseUrl = 'https://api.quickbase.com/v1';\n        this.headers = {\n            'QB-Realm-Hostname': this.hostname,\n            'Authorization': `QB-USER-TOKEN ${token}`,\n            'Content-Type': 'application/json'\n        };\n    }\n\n    async getRecords(tableId, options = {}) {\n        const endpoint = `${this.baseUrl}/records/query`;\n        \n        const body = {\n            from: tableId,\n            select: options.fields || [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n            where: options.where || '',\n            sortBy: options.sortBy || [],\n            options: {\n                skip: options.skip || 0,\n                top: options.top || 100\n            }\n        };\n\n        try {\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: this.headers,\n                body: JSON.stringify(body)\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`API error: ${response.status} - ${errorText}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Quickbase API error:', error);\n            throw error;\n        }\n    }\n    \n    async createRecord(tableId, fields) {\n        const endpoint = `${this.baseUrl}/records`;\n        \n        const body = {\n            to: tableId,\n            data: [{ \n                fields: fields \n            }]\n        };\n\n        try {\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: this.headers,\n                body: JSON.stringify(body)\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`API error: ${response.status} - ${errorText}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Quickbase API error:', error);\n            throw error;\n        }\n    }\n    \n    async updateRecord(tableId, recordId, fields) {\n        const endpoint = `${this.baseUrl}/records`;\n        \n        const body = {\n            to: tableId,\n            data: [{ \n                id: recordId,\n                fields: fields \n            }]\n        };\n\n        try {\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: this.headers,\n                body: JSON.stringify(body)\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`API error: ${response.status} - ${errorText}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Quickbase API error:', error);\n            throw error;\n        }\n    }\n    \n    async deleteRecord(tableId, recordId) {\n        const endpoint = `${this.baseUrl}/records`;\n        \n        const body = {\n            from: tableId,\n            where: `{3.EX.'${recordId}'}`\n        };\n\n        try {\n            const response = await fetch(endpoint, {\n                method: 'DELETE',\n                headers: this.headers,\n                body: JSON.stringify(body)\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`API error: ${response.status} - ${errorText}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Quickbase API error:', error);\n            throw error;\n        }\n    }\n}"
      },
      {
        "id": 232,
        "title": "Integrate work orders with MapsIndoors",
        "summary": "",
        "code": "function initWorkOrderSystem(mapsIndoorsInstance, quickbaseAPI, tableId, locationIdField, statusField) {"
      },
      {
        "id": 233,
        "title": "Get work orders and update map",
        "summary": "async function updateWorkOrdersOnMap() {",
        "code": "try {"
      },
      {
        "id": 234,
        "title": "Get work orders from Quickbase",
        "summary": "if (!result.data || result.data.length === 0) {",
        "code": "const result = await quickbaseAPI.getRecords(tableId);\n            \n                console.log('No work orders found');\n                return [];\n            }\n            \n            const workOrders = result.data.map(record => {\n                const fields = record.fields;"
      },
      {
        "id": 235,
        "title": "Extract location ID and status",
        "summary": "",
        "code": "const locationId = fields[locationIdField];\n                const status = fields[statusField];\n                \n                return {\n                    id: record.id,\n                    locationId,\n                    status,\n                    fields\n                };\n            });"
      },
      {
        "id": 236,
        "title": "Update map display rules based on work order status",
        "summary": "'Open': '#f44336',",
        "code": "const statusColors = {\n                'In Progress': '#ff9800',\n                'Completed': '#4caf50',\n                'Pending': '#2196f3'\n            };"
      },
      {
        "id": 237,
        "title": "Group by status",
        "summary": "if (!order.locationId) return;",
        "code": "const locationsByStatus = {};\n            \n            workOrders.forEach(order => {\n                \n                if (!locationsByStatus[order.status]) {\n                    locationsByStatus[order.status] = [];\n                }\n                \n                locationsByStatus[order.status].push(order.locationId);\n            });"
      },
      {
        "id": 238,
        "title": "Apply display rules for each status group",
        "summary": "mapsIndoorsInstance.setDisplayRule(locationIds, {",
        "code": "Object.entries(locationsByStatus).forEach(([status, locationIds]) => {\n                const color = statusColors[status] || '#9e9e9e';\n                \n                    polygonVisible: true,\n                    polygonFillColor: color,\n                    polygonFillOpacity: 0.5,\n                    polygonStrokeColor: color,\n                    polygonStrokeOpacity: 0.8,\n                    polygonStrokeWidth: 1,\n                    zoomFrom: 16\n                });\n            });\n            \n            return workOrders;\n        } catch (error) {\n            console.error('Error updating work orders:', error);\n            return [];\n        }\n    }"
      },
      {
        "id": 239,
        "title": "Create a new work order",
        "summary": "async function createWorkOrder(locationId, fields) {",
        "code": "try {"
      },
      {
        "id": 240,
        "title": "Add location ID to fields",
        "summary": "fields[locationIdField] = locationId;",
        "code": ""
      },
      {
        "id": 241,
        "title": "Create record",
        "summary": "",
        "code": "const result = await quickbaseAPI.createRecord(tableId, fields);"
      },
      {
        "id": 242,
        "title": "Update map",
        "summary": "await updateWorkOrdersOnMap();",
        "code": "return result;\n        } catch (error) {\n            console.error('Error creating work order:', error);\n            throw error;\n        }\n    }"
      },
      {
        "id": 243,
        "title": "Update work order status",
        "summary": "async function updateWorkOrderStatus(recordId, status) {",
        "code": "try {"
      },
      {
        "id": 244,
        "title": "Update record",
        "summary": "[statusField]: status",
        "code": "const result = await quickbaseAPI.updateRecord(tableId, recordId, {\n            });"
      },
      {
        "id": 245,
        "title": "Update map",
        "summary": "await updateWorkOrdersOnMap();",
        "code": "return result;\n        } catch (error) {\n            console.error('Error updating work order status:', error);\n            throw error;\n        }\n    }"
      },
      {
        "id": 246,
        "title": "Return public methods",
        "summary": "updateWorkOrdersOnMap,",
        "code": "return {\n        createWorkOrder,\n        updateWorkOrderStatus\n    };\n}\nComplete Example: Room Booking Application"
      },
      {
        "id": 247,
        "title": "Here's a complete example that brings together many of the concepts we've covered to create a room booking application",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 249,
        "title": "Initialize MapsIndoors",
        "summary": "accessToken: 'YOUR_MAPBOX_TOKEN',",
        "code": "const mapViewOptions = {\n        element: document.getElementById('map'),\n        center: { lat: 30.3603212, lng: -97.7422623 },\n        zoom: 20,\n        maxZoom: 22,\n    };\n\n    const mapViewInstance = new mapsindoors.mapView.MapboxV3View(mapViewOptions);\n    const mapsIndoorsInstance = new mapsindoors.MapsIndoors({\n        mapView: mapViewInstance,\n    });\n    const mapboxInstance = mapViewInstance.getMap();"
      },
      {
        "id": 250,
        "title": "Add floor selector",
        "summary": "new mapsindoors.FloorSelector(floorSelectorElement, mapsIndoorsInstance);",
        "code": "const floorSelectorElement = document.createElement('div');\n    mapboxInstance.addControl({ \n        onAdd: function () { return floorSelectorElement },\n        onRemove: function () { }\n    });"
      },
      {
        "id": 251,
        "title": "Global variables",
        "summary": "let roomsData = [];",
        "code": "let selectedRoomId = null;\n    let currentFilter = 'all';\n    let searchTerm = '';"
      },
      {
        "id": 252,
        "title": "Add UI elements",
        "summary": "searchTerm = term;",
        "code": "const searchContainer = createSearchUI(\n        (term) => {\n            renderRoomList();\n        },\n        (filter) => {\n            currentFilter = filter;\n            renderRoomList();\n        }\n    );\n    document.body.appendChild(searchContainer);\n\n    const detailPanel = createLocationDetailPanel();\n    document.body.appendChild(detailPanel.element);"
      },
      {
        "id": 253,
        "title": "Map control buttons",
        "summary": "mapControls.style.cssText = `",
        "code": "const mapControls = document.createElement('div');\n        position: absolute;\n        top: 20px;\n        right: 20px;\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        z-index: 10;\n    `;\n\n    mapControls.innerHTML = `\n        <button class=\"map-control-btn\" id=\"zoom-in\" style=\"width: 40px; height: 40px; background: white; border: none; border-radius: 4px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); cursor: pointer;\">\n            <i class=\"fas fa-plus\"></i>\n        </button>\n        <button class=\"map-control-btn\" id=\"zoom-out\" style=\"width: 40px; height: 40px; background: white; border: none; border-radius: 4px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); cursor: pointer;\">\n            <i class=\"fas fa-minus\"></i>\n        </button>\n        <button class=\"map-control-btn\" id=\"recenter\" style=\"width: 40px; height: 40px; background: white; border: none; border-radius: 4px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); cursor: pointer;\">\n            <i class=\"fas fa-crosshairs\"></i>\n        </button>\n    `;\n    document.body.appendChild(mapControls);\n\n    document.getElementById('zoom-in').addEventListener('click', () => mapboxInstance.zoomIn());\n    document.getElementById('zoom-out').addEventListener('click', () => mapboxInstance.zoomOut());\n    document.getElementById('recenter').addEventListener('click', recenterMap);"
      },
      {
        "id": 254,
        "title": "Initialize room booking system",
        "summary": "let bookingSystem = null;",
        "code": ""
      },
      {
        "id": 255,
        "title": "MapsIndoors ready event",
        "summary": "mapsIndoorsInstance.addListener('ready', async function() {",
        "code": "console.log('MapsIndoors is ready');"
      },
      {
        "id": 256,
        "title": "Get meeting rooms",
        "summary": "types: ['MeetingRoom', 'MeetingRoom Small', 'MeetingRoom Extra Small', 'MeetingRoom Medium', 'MeetingRoom Large'],",
        "code": "const locations = await mapsindoors.services.LocationsService.getLocations({\n            venue: 'AUSTINOFFICE',\n            take: 100\n        });\n        \n        console.log(`Found ${locations.length} meeting rooms`);"
      },
      {
        "id": 257,
        "title": "If not enough rooms, get other locations with polygons",
        "summary": "let meetingRooms = [...locations];",
        "code": "if (meetingRooms.length < 5) {\n            const additionalLocations = await mapsindoors.services.LocationsService.getLocations({\n                venue: 'AUSTINOFFICE',\n                take: 100\n            });\n            \n            const roomCandidates = additionalLocations.filter(location => {\n                return location.geometry && \n                      (location.geometry.type === \"Polygon\" || \n                       location.geometry.type === \"MultiPolygon\") &&\n                      !meetingRooms.some(room => room.id === location.id);\n            });\n            \n            meetingRooms = [...meetingRooms, ...roomCandidates.slice(0, 10)];\n        }"
      },
      {
        "id": 258,
        "title": "Process room data",
        "summary": "id: location.id,",
        "code": "roomsData = meetingRooms.map(location => {\n            return {\n                name: location.properties.name || 'Unnamed Room',\n                floor: location.properties.floor,\n                building: location.properties.building,\n                type: location.properties.type || 'Meeting Room',\n                capacity: Math.floor(Math.random() * 15) + 2, // Random capacity for demo\n                location: {\n                    lat: location.properties.anchor.coordinates[1],\n                    lng: location.properties.anchor.coordinates[0]\n                },\n                geometry: location.geometry,\n                status: Math.random() > 0.5 ? 'available' : 'occupied', // Random initial status\n                bookings: [],\n                features: [\n                    'Wi-Fi',\n                    Math.random() > 0.3 ? 'Display Screen' : null,\n                    Math.random() > 0.5 ? 'Video Conferencing' : null,\n                    Math.random() > 0.7 ? 'Whiteboard' : null\n                ].filter(Boolean)\n            };\n        });"
      },
      {
        "id": 259,
        "title": "Initialize booking system",
        "summary": "bookingSystem = initializeRoomStatusSystem(mapsIndoorsInstance, roomsData);",
        "code": ""
      },
      {
        "id": 260,
        "title": "Update display rules based on availability",
        "summary": "updateRoomDisplayRules();",
        "code": ""
      },
      {
        "id": 261,
        "title": "Render room list",
        "summary": "renderRoomList();",
        "code": ""
      },
      {
        "id": 262,
        "title": "Setup event listeners",
        "summary": "setupEventListeners();",
        "code": ""
      },
      {
        "id": 263,
        "title": "Set initial floor to most populated one",
        "summary": "floorCounts[room.floor] = (floorCounts[room.floor] || 0) + 1;",
        "code": "const floorCounts = {};\n        roomsData.forEach(room => {\n        });\n        \n        const mostPopulatedFloor = Object.entries(floorCounts)\n            .sort((a, b) => b[1] - a[1])[0][0];\n        \n        mapsIndoorsInstance.setFloor(parseInt(mostPopulatedFloor));"
      },
      {
        "id": 264,
        "title": "Center map on rooms",
        "summary": "",
        "code": "recenterMap();\n    });"
      },
      {
        "id": 265,
        "title": "Setup event listeners",
        "summary": "",
        "code": "function setupEventListeners() {"
      },
      {
        "id": 266,
        "title": "MapsIndoors click event",
        "summary": "if (event && event.id) {",
        "code": "mapsIndoorsInstance.addListener('click', (event) => {\n                const room = roomsData.find(r => r.id === event.id);\n                if (room) {\n                    selectRoom(room.id);\n                }\n            }\n        });\n    }"
      },
      {
        "id": 267,
        "title": "Update room display rules based on status",
        "summary": "",
        "code": "function updateRoomDisplayRules() {"
      },
      {
        "id": 268,
        "title": "Group rooms by status",
        "summary": "",
        "code": "const availableRooms = roomsData.filter(room => room.status === 'available').map(room => room.id);\n        const occupiedRooms = roomsData.filter(room => room.status === 'occupied').map(room => room.id);"
      },
      {
        "id": 269,
        "title": "Apply display rules based on status",
        "summary": "mapsIndoorsInstance.setDisplayRule(availableRooms, {",
        "code": "polygonVisible: true,\n            polygonFillColor: '#4CAF50', // Green for available\n            polygonFillOpacity: 0.5,\n            polygonStrokeColor: '#4CAF50',\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });\n        \n        mapsIndoorsInstance.setDisplayRule(occupiedRooms, {\n            polygonVisible: true,\n            polygonFillColor: '#F44336', // Red for occupied\n            polygonFillOpacity: 0.5,\n            polygonStrokeColor: '#F44336',\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });"
      },
      {
        "id": 270,
        "title": "Highlight selected room if any",
        "summary": "if (selectedRoomId) {",
        "code": "const room = roomsData.find(r => r.id === selectedRoomId);\n            if (room) {\n                const color = room.status === 'available' ? '#4CAF50' : '#F44336';\n                \n                mapsIndoorsInstance.setDisplayRule(selectedRoomId, {\n                    polygonVisible: true,\n                    polygonFillOpacity: 0.8,\n                    polygonStrokeOpacity: 1,\n                    polygonStrokeWidth: 3,\n                    zoomFrom: 16\n                });\n            }\n        }\n    }"
      },
      {
        "id": 271,
        "title": "Select a room",
        "summary": "selectedRoomId = roomId;",
        "code": "function selectRoom(roomId) {\n        const room = roomsData.find(r => r.id === roomId);\n        if (!room) return;"
      },
      {
        "id": 272,
        "title": "Center map on room",
        "summary": "mapboxInstance.flyTo({",
        "code": "center: [room.location.lng, room.location.lat],\n            zoom: 21,\n            duration: 1000\n        });"
      },
      {
        "id": 273,
        "title": "Set floor to match room",
        "summary": "mapsIndoorsInstance.setFloor(room.floor);",
        "code": ""
      },
      {
        "id": 274,
        "title": "Update room highlights",
        "summary": "updateRoomDisplayRules();",
        "code": ""
      },
      {
        "id": 275,
        "title": "Update detail panel",
        "summary": "updateRoomDetailPanel(room);",
        "code": "}"
      },
      {
        "id": 276,
        "title": "Update room detail panel",
        "summary": "",
        "code": "function updateRoomDetailPanel(room) {"
      },
      {
        "id": 277,
        "title": "Define actions based on room status",
        "summary": "if (room.status === 'available') {",
        "code": "const actions = [];\n        \n            actions.push({\n                text: 'Book Now',\n                icon: 'fas fa-calendar-plus',\n                type: 'primary',\n                onClick: (location) => bookRoom(location.id)\n            });\n        } else {\n            actions.push({\n                text: 'Join Waiting List',\n                icon: 'fas fa\n\n\n\n\nContinue\n\nEdit"
      },
      {
        "id": 278,
        "title": "I'll continue with the Room Booking Application example",
        "summary": "text: 'Join Waiting List',",
        "code": "javascript\n                icon: 'fas fa-clock',\n                type: 'primary',\n                onClick: (location) => joinWaitlist(location.id)\n            });\n            \n            actions.push({\n                text: 'View Schedule',\n                icon: 'fas fa-calendar-alt',\n                type: 'secondary',\n                onClick: (location) => viewRoomSchedule(location.id)\n            });\n        }"
      },
      {
        "id": 279,
        "title": "Create a list of room features",
        "summary": "let icon = 'fas fa-check';",
        "code": "const roomFeatures = room.features.map(feature => {\n            \n            if (feature.includes('Display')) icon = 'fas fa-tv';\n            if (feature.includes('Video')) icon = 'fas fa-video';\n            if (feature.includes('Wi-Fi')) icon = 'fas fa-wifi';\n            if (feature.includes('Whiteboard')) icon = 'fas fa-chalkboard';\n            \n            return { name: feature, icon };\n        });"
      },
      {
        "id": 280,
        "title": "Add standard details",
        "summary": "roomFeatures.unshift({",
        "code": "name: `Capacity: ${room.capacity} people`,\n            icon: 'fas fa-users'\n        });"
      },
      {
        "id": 281,
        "title": "Update the detail panel",
        "summary": "detailPanel.update({",
        "code": "properties: {\n                name: room.name,\n                floor: room.floor,\n                type: room.type,\n                status: room.status\n            }\n        }, actions);\n    }"
      },
      {
        "id": 282,
        "title": "Render room list",
        "summary": "container.style.cssText = `",
        "code": "function renderRoomList() {\n        const container = document.querySelector('.room-list') || document.createElement('div');\n        container.className = 'room-list';\n            position: absolute;\n            left: 20px;\n            top: 150px;\n            max-height: calc(100vh - 200px);\n            width: 300px;\n            overflow-y: auto;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            padding: 15px;\n            z-index: 10;\n        `;"
      },
      {
        "id": 283,
        "title": "Filter rooms",
        "summary": "",
        "code": "let filteredRooms = roomsData.filter(room => {"
      },
      {
        "id": 284,
        "title": "Filter by search term",
        "summary": "if (searchTerm && !room.name.toLowerCase().includes(searchTerm.toLowerCase())) {",
        "code": "return false;\n            }"
      },
      {
        "id": 285,
        "title": "Filter by status",
        "summary": "if (currentFilter !== 'all' && currentFilter !== room.type) {",
        "code": "return false;\n            }\n            \n            return true;\n        });"
      },
      {
        "id": 286,
        "title": "Sort rooms: available first, then by name",
        "summary": "if (a.status !== b.status) {",
        "code": "filteredRooms.sort((a, b) => {\n                return a.status === 'available' ? -1 : 1;\n            }\n            return a.name.localeCompare(b.name);\n        });"
      },
      {
        "id": 287,
        "title": "Create room list",
        "summary": "let html = `<h3 style=\"margin-top: 0; margin-bottom: 15px;\">Available Rooms (${filteredRooms.length})</h3>`;",
        "code": "if (filteredRooms.length === 0) {\n            html += `\n                <div style=\"text-align: center; padding: 20px; color: #666;\">\n                    <i class=\"fas fa-search\" style=\"font-size: 24px; margin-bottom: 10px;\"></i>\n                    <p>No rooms match your criteria.</p>\n                </div>\n            `;\n        } else {\n            filteredRooms.forEach(room => {\n                const isSelected = selectedRoomId === room.id;\n                const statusColor = room.status === 'available' ? '#4CAF50' : '#F44336';\n                const statusText = room.status === 'available' ? 'Available' : 'Occupied';\n                const statusIcon = room.status === 'available' ? 'fas fa-check-circle' : 'fas fa-times-circle';\n                \n                html += `\n                    <div class=\"room-card ${isSelected ? 'selected' : ''}\" \n                         data-id=\"${room.id}\" \n                         style=\"\n                            background: white;\n                            border-radius: 8px;\n                            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                            padding: 15px;\n                            margin-bottom: 15px;\n                            border-left: 4px solid ${statusColor};\n                            cursor: pointer;\n                            ${isSelected ? 'box-shadow: 0 0 0 2px #FF9800;' : ''}\n                         \">\n                        <div style=\"display: flex; justify-content: space-between; margin-bottom: 10px;\">\n                            <div style=\"font-weight: 600;\">${room.name}</div>\n                            <div style=\"\n                                color: ${statusColor};\n                                font-size: 0.8rem;\n                                display: flex;\n                                align-items: center;\n                                gap: 5px;\n                            \">\n                                <i class=\"${statusIcon}\"></i>\n                                <span>${statusText}</span>\n                            </div>\n                        </div>\n                        <div style=\"font-size: 0.85rem; color: #666;\">\n                            <div>Floor ${room.floor}</div>\n                            <div>Capacity: ${room.capacity} people</div>\n                        </div>\n                    </div>\n                `;\n            });\n        }\n        \n        container.innerHTML = html;"
      },
      {
        "id": 288,
        "title": "Add click handlers",
        "summary": "selectRoom(card.dataset.id);",
        "code": "container.querySelectorAll('.room-card').forEach(card => {\n            card.addEventListener('click', () => {\n            });\n        });"
      },
      {
        "id": 289,
        "title": "Add to document if not already there",
        "summary": "if (!document.body.contains(container)) {",
        "code": "document.body.appendChild(container);\n        }\n    }"
      },
      {
        "id": 290,
        "title": "Book a room",
        "summary": "if (!room || room.status !== 'available') {",
        "code": "function bookRoom(roomId) {\n        const room = roomsData.find(r => r.id === roomId);\n            createToast('This room is not available for booking', 'error');\n            return;\n        }"
      },
      {
        "id": 291,
        "title": "Show booking modal",
        "summary": "modal.style.cssText = `",
        "code": "const modal = document.createElement('div');\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 9999;\n        `;\n        \n        modal.innerHTML = `\n            <div style=\"\n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n                width: 400px;\n                max-width: 90%;\n                padding: 20px;\n            \">\n                <h2 style=\"margin-top: 0;\">Book ${room.name}</h2>\n                <form id=\"booking-form\">\n                    <div style=\"margin-bottom: 15px;\">\n                        <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Date</label>\n                        <input type=\"date\" id=\"booking-date\" required style=\"\n                            width: 100%;\n                            padding: 8px;\n                            border: 1px solid #ddd;\n                            border-radius: 4px;\n                        \">\n                    </div>\n                    <div style=\"margin-bottom: 15px;\">\n                        <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Time</label>\n                        <div style=\"display: flex; gap: 10px;\">\n                            <select id=\"booking-start-time\" required style=\"\n                                flex: 1;\n                                padding: 8px;\n                                border: 1px solid #ddd;\n                                border-radius: 4px;\n                            \">\n                                ${generateTimeOptions(8, 17)}\n                            </select>\n                            <span style=\"align-self: center;\">to</span>\n                            <select id=\"booking-end-time\" required style=\"\n                                flex: 1;\n                                padding: 8px;\n                                border: 1px solid #ddd;\n                                border-radius: 4px;\n                            \">\n                                ${generateTimeOptions(9, 18)}\n                            </select>\n                        </div>\n                    </div>\n                    <div style=\"margin-bottom: 15px;\">\n                        <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Purpose</label>\n                        <input type=\"text\" id=\"booking-purpose\" placeholder=\"Meeting purpose\" required style=\"\n                            width: 100%;\n                            padding: 8px;\n                            border: 1px solid #ddd;\n                            border-radius: 4px;\n                        \">\n                    </div>\n                    <div style=\"margin-bottom: 15px;\">\n                        <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Attendees</label>\n                        <input type=\"number\" id=\"booking-attendees\" min=\"1\" max=\"${room.capacity}\" value=\"2\" required style=\"\n                            width: 100%;\n                            padding: 8px;\n                            border: 1px solid #ddd;\n                            border-radius: 4px;\n                        \">\n                        <small style=\"color: #666;\">Maximum capacity: ${room.capacity}</small>\n                    </div>\n                    <div style=\"display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px;\">\n                        <button type=\"button\" id=\"cancel-booking\" style=\"\n                            padding: 8px 16px;\n                            border: none;\n                            border-radius: 4px;\n                            background: #e0e0e0;\n                            cursor: pointer;\n                        \">Cancel</button>\n                        <button type=\"submit\" style=\"\n                            padding: 8px 16px;\n                            border: none;\n                            border-radius: 4px;\n                            background: #4CAF50;\n                            color: white;\n                            cursor: pointer;\n                        \">Book Now</button>\n                    </div>\n                </form>\n            </div>\n        `;\n        \n        document.body.appendChild(modal);"
      },
      {
        "id": 292,
        "title": "Set default date to today",
        "summary": "document.getElementById('booking-date').value = dateStr;",
        "code": "const today = new Date();\n        const dateStr = today.toISOString().split('T')[0];"
      },
      {
        "id": 293,
        "title": "Cancel button handler",
        "summary": "document.body.removeChild(modal);",
        "code": "document.getElementById('cancel-booking').addEventListener('click', () => {\n        });"
      },
      {
        "id": 294,
        "title": "Form submit handler",
        "summary": "e.preventDefault();",
        "code": "document.getElementById('booking-form').addEventListener('submit', (e) => {\n            \n            const date = document.getElementById('booking-date').value;\n            const startTime = document.getElementById('booking-start-time').value;\n            const endTime = document.getElementById('booking-end-time').value;\n            const purpose = document.getElementById('booking-purpose').value;\n            const attendees = document.getElementById('booking-attendees').value;"
      },
      {
        "id": 295,
        "title": "Validate times",
        "summary": "if (startTime >= endTime) {",
        "code": "alert('End time must be after start time');\n                return;\n            }"
      },
      {
        "id": 296,
        "title": "Create booking",
        "summary": "if (bookingResult.success) {",
        "code": "const startDateTime = new Date(`${date}T${startTime}`);\n            const endDateTime = new Date(`${date}T${endTime}`);\n            \n            const bookingResult = bookingSystem.bookRoom(\n                roomId,\n                startDateTime,\n                endDateTime,\n                'current-user',\n                purpose\n            );"
      },
      {
        "id": 297,
        "title": "Update room status",
        "summary": "room.status = 'occupied';",
        "code": "updateRoomDisplayRules();\n                updateRoomDetailPanel(room);\n                renderRoomList();"
      },
      {
        "id": 298,
        "title": "Show success message",
        "summary": "createToast(`Successfully booked ${room.name}`, 'success');",
        "code": "} else {"
      },
      {
        "id": 299,
        "title": "Show error message",
        "summary": "createToast(bookingResult.message, 'error');",
        "code": "}"
      },
      {
        "id": 300,
        "title": "Close modal",
        "summary": "document.body.removeChild(modal);",
        "code": "});\n    }"
      },
      {
        "id": 301,
        "title": "Join room waitlist",
        "summary": "if (!room) return;",
        "code": "function joinWaitlist(roomId) {\n        const room = roomsData.find(r => r.id === roomId);"
      },
      {
        "id": 302,
        "title": "Show waitlist modal",
        "summary": "modal.style.cssText = `",
        "code": "const modal = document.createElement('div');\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 9999;\n        `;\n        \n        modal.innerHTML = `\n            <div style=\"\n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n                width: 400px;\n                max-width: 90%;\n                padding: 20px;\n            \">\n                <h2 style=\"margin-top: 0;\">Join Waitlist for ${room.name}</h2>\n                <form id=\"waitlist-form\">\n                    <div style=\"margin-bottom: 15px;\">\n                        <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Date</label>\n                        <input type=\"date\" id=\"waitlist-date\" required style=\"\n                            width: 100%;\n                            padding: 8px;\n                            border: 1px solid #ddd;\n                            border-radius: 4px;\n                        \">\n                    </div>\n                    <div style=\"margin-bottom: 15px;\">\n                        <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Preferred Time</label>\n                        <div style=\"display: flex; gap: 10px;\">\n                            <select id=\"waitlist-start-time\" required style=\"\n                                flex: 1;\n                                padding: 8px;\n                                border: 1px solid #ddd;\n                                border-radius: 4px;\n                            \">\n                                ${generateTimeOptions(8, 17)}\n                            </select>\n                            <span style=\"align-self: center;\">to</span>\n                            <select id=\"waitlist-end-time\" required style=\"\n                                flex: 1;\n                                padding: 8px;\n                                border: 1px solid #ddd;\n                                border-radius: 4px;\n                            \">\n                                ${generateTimeOptions(9, 18)}\n                            </select>\n                        </div>\n                    </div>\n                    <div style=\"margin-bottom: 15px;\">\n                        <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Purpose</label>\n                        <input type=\"text\" id=\"waitlist-purpose\" placeholder=\"Meeting purpose\" required style=\"\n                            width: 100%;\n                            padding: 8px;\n                            border: 1px solid #ddd;\n                            border-radius: 4px;\n                        \">\n                    </div>\n                    <div style=\"margin-bottom: 15px;\">\n                        <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Attendees</label>\n                        <input type=\"number\" id=\"waitlist-attendees\" min=\"1\" max=\"${room.capacity}\" value=\"2\" required style=\"\n                            width: 100%;\n                            padding: 8px;\n                            border: 1px solid #ddd;\n                            border-radius: 4px;\n                        \">\n                        <small style=\"color: #666;\">Maximum capacity: ${room.capacity}</small>\n                    </div>\n                    <div style=\"margin-bottom: 15px;\">\n                        <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Your Name</label>\n                        <input type=\"text\" id=\"waitlist-name\" required style=\"\n                            width: 100%;\n                            padding: 8px;\n                            border: 1px solid #ddd;\n                            border-radius: 4px;\n                        \">\n                    </div>\n                    <div style=\"margin-bottom: 15px;\">\n                        <label style=\"display: block; margin-bottom: 5px; font-weight: 500;\">Your Email</label>\n                        <input type=\"email\" id=\"waitlist-email\" required style=\"\n                            width: 100%;\n                            padding: 8px;\n                            border: 1px solid #ddd;\n                            border-radius: 4px;\n                        \">\n                    </div>\n                    <div style=\"display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px;\">\n                        <button type=\"button\" id=\"cancel-waitlist\" style=\"\n                            padding: 8px 16px;\n                            border: none;\n                            border-radius: 4px;\n                            background: #e0e0e0;\n                            cursor: pointer;\n                        \">Cancel</button>\n                        <button type=\"submit\" style=\"\n                            padding: 8px 16px;\n                            border: none;\n                            border-radius: 4px;\n                            background: #2196F3;\n                            color: white;\n                            cursor: pointer;\n                        \">Join Waitlist</button>\n                    </div>\n                </form>\n            </div>\n        `;\n        \n        document.body.appendChild(modal);"
      },
      {
        "id": 303,
        "title": "Set default date to today",
        "summary": "document.getElementById('waitlist-date').value = dateStr;",
        "code": "const today = new Date();\n        const dateStr = today.toISOString().split('T')[0];"
      },
      {
        "id": 304,
        "title": "Cancel button handler",
        "summary": "document.body.removeChild(modal);",
        "code": "document.getElementById('cancel-waitlist').addEventListener('click', () => {\n        });"
      },
      {
        "id": 305,
        "title": "Form submit handler",
        "summary": "e.preventDefault();",
        "code": "document.getElementById('waitlist-form').addEventListener('submit', (e) => {"
      },
      {
        "id": 306,
        "title": "In a real app, this would submit to a server",
        "summary": "createToast(`You've been added to the waitlist for ${room.name}`, 'success');",
        "code": ""
      },
      {
        "id": 307,
        "title": "Close modal",
        "summary": "document.body.removeChild(modal);",
        "code": "});\n    }"
      },
      {
        "id": 308,
        "title": "View room schedule",
        "summary": "if (!room) return;",
        "code": "function viewRoomSchedule(roomId) {\n        const room = roomsData.find(r => r.id === roomId);"
      },
      {
        "id": 309,
        "title": "Generate sample bookings if none exist",
        "summary": "if (!room.bookings || room.bookings.length === 0) {",
        "code": "generateSampleBookings(room);\n        }"
      },
      {
        "id": 310,
        "title": "Show schedule modal",
        "summary": "modal.style.cssText = `",
        "code": "const modal = document.createElement('div');\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 9999;\n        `;"
      },
      {
        "id": 311,
        "title": "Generate HTML for today's schedule",
        "summary": "modal.innerHTML = `",
        "code": "const today = new Date();\n        const dateStr = today.toISOString().split('T')[0];\n        \n        const schedule = generateScheduleHTML(room, today);\n        \n            <div style=\"\n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n                width: 500px;\n                max-width: 90%;\n                max-height: 90vh;\n                overflow-y: auto;\n                padding: 20px;\n            \">\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\">\n                    <h2 style=\"margin: 0;\">${room.name} Schedule</h2>\n                    <button id=\"close-schedule\" style=\"\n                        background: none;\n                        border: none;\n                        font-size: 1.5rem;\n                        cursor: pointer;\n                        padding: 0;\n                    \">\u00d7</button>\n                </div>\n                \n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\n                    <button id=\"prev-day\" style=\"\n                        background: none;\n                        border: none;\n                        font-size: 1.5rem;\n                        cursor: pointer;\n                    \">\u2039</button>\n                    <h3 id=\"schedule-date\" style=\"margin: 0;\">${formatDate(today)}</h3>\n                    <button id=\"next-day\" style=\"\n                        background: none;\n                        border: none;\n                        font-size: 1.5rem;\n                        cursor: pointer;\n                    \">\u203a</button>\n                </div>\n                \n                <div id=\"schedule-container\">\n                    ${schedule}\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(modal);"
      },
      {
        "id": 312,
        "title": "Close button handler",
        "summary": "document.body.removeChild(modal);",
        "code": "document.getElementById('close-schedule').addEventListener('click', () => {\n        });"
      },
      {
        "id": 313,
        "title": "Initialize date navigation",
        "summary": "let currentDate = new Date(today);",
        "code": ""
      },
      {
        "id": 314,
        "title": "Previous day handler",
        "summary": "currentDate.setDate(currentDate.getDate() - 1);",
        "code": "document.getElementById('prev-day').addEventListener('click', () => {\n            updateSchedule();\n        });"
      },
      {
        "id": 315,
        "title": "Next day handler",
        "summary": "currentDate.setDate(currentDate.getDate() + 1);",
        "code": "document.getElementById('next-day').addEventListener('click', () => {\n            updateSchedule();\n        });"
      },
      {
        "id": 316,
        "title": "Update schedule when date changes",
        "summary": "document.getElementById('schedule-date').textContent = formatDate(currentDate);",
        "code": "function updateSchedule() {\n            document.getElementById('schedule-container').innerHTML = generateScheduleHTML(room, currentDate);\n        }\n    }"
      },
      {
        "id": 317,
        "title": "Generate time options for dropdowns",
        "summary": "let options = '';",
        "code": "function generateTimeOptions(startHour, endHour) {\n        for (let hour = startHour; hour <= endHour; hour++) {\n            const hourStr = hour.toString().padStart(2, '0');\n            options += `<option value=\"${hourStr}:00\">${hourStr}:00</option>`;\n            if (hour < endHour) {\n                options += `<option value=\"${hourStr}:30\">${hourStr}:30</option>`;\n            }\n        }\n        return options;\n    }"
      },
      {
        "id": 318,
        "title": "Generate sample bookings for a room",
        "summary": "room.bookings = [];",
        "code": "function generateSampleBookings(room) {\n        const today = new Date();"
      },
      {
        "id": 319,
        "title": "Generate 1-3 random bookings for today",
        "summary": "for (let i = 0; i < numBookings; i++) {",
        "code": "const numBookings = Math.floor(Math.random() * 3) + 1;\n        const hours = [9, 10, 11, 13, 14, 15, 16];\n        \n            const startHour = hours[Math.floor(Math.random() * hours.length)];\n            const duration = Math.random() > 0.7 ? 2 : 1; // 30% chance of 2-hour meeting\n            \n            const startTime = new Date(today);\n            startTime.setHours(startHour, 0, 0, 0);\n            \n            const endTime = new Date(startTime);\n            endTime.setHours(startTime.getHours() + duration);\n            \n            room.bookings.push({\n                id: `booking-${Date.now()}-${i}`,\n                startTime,\n                endTime,\n                userId: 'sample-user',\n                purpose: ['Team Meeting', 'Client Call', 'Project Review', 'Workshop', 'Interview'][Math.floor(Math.random() * 5)],\n                attendees: Math.floor(Math.random() * room.capacity) + 1\n            });"
      },
      {
        "id": 320,
        "title": "Remove this hour from available hours",
        "summary": "if (index > -1) {",
        "code": "const index = hours.indexOf(startHour);\n                hours.splice(index, 1);\n                if (duration > 1 && hours.includes(startHour + 1)) {\n                    const nextIndex = hours.indexOf(startHour + 1);\n                    hours.splice(nextIndex, 1);\n                }\n            }\n        }\n    }"
      },
      {
        "id": 321,
        "title": "Generate HTML for a room's schedule",
        "summary": "",
        "code": "function generateScheduleHTML(room, date) {"
      },
      {
        "id": 322,
        "title": "Get bookings for this date",
        "summary": "dayStart.setHours(0, 0, 0, 0);",
        "code": "const dayStart = new Date(date);\n        \n        const dayEnd = new Date(date);\n        dayEnd.setHours(23, 59, 59, 999);\n        \n        const bookings = room.bookings.filter(booking => \n            booking.startTime >= dayStart && booking.startTime < dayEnd\n        );"
      },
      {
        "id": 323,
        "title": "Sort bookings by start time",
        "summary": "",
        "code": "bookings.sort((a, b) => a.startTime - b.startTime);"
      },
      {
        "id": 324,
        "title": "Generate time slots",
        "summary": "for (const hour of workHours) {",
        "code": "let html = '';\n        const workHours = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17];\n        \n            const startTime = new Date(date);\n            startTime.setHours(hour, 0, 0, 0);\n            \n            const endTime = new Date(date);\n            endTime.setHours(hour + 1, 0, 0, 0);"
      },
      {
        "id": 325,
        "title": "Check if there's a booking for this slot",
        "summary": "(b.startTime < endTime && b.endTime > startTime)",
        "code": "const booking = bookings.find(b => \n            );\n            \n            const isBooked = !!booking;\n            const bgColor = isBooked ? '#ffebee' : '#e8f5e9';\n            const textColor = isBooked ? '#d32f2f' : '#2e7d32';\n            const status = isBooked ? 'Booked' : 'Available';\n            const icon = isBooked ? 'fas fa-calendar-check' : 'fas fa-check-circle';\n            \n            html += `\n                <div style=\"\n                    background-color: ${bgColor};\n                    color: ${textColor};\n                    padding: 12px;\n                    border-radius: 4px;\n                    margin-bottom: 8px;\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                \">\n                    <div>\n                        <div style=\"font-weight: 500;\">${formatTimeHour(hour)}</div>\n                        <div style=\"display: flex; align-items: center; gap: 5px; margin-top: 5px;\">\n                            <i class=\"${icon}\"></i>\n                            <span>${status}</span>\n                        </div>\n                    </div>\n                    ${isBooked ? `\n                        <div style=\"text-align: right;\">\n                            <div style=\"font-weight: 500;\">${booking.purpose}</div>\n                            <div style=\"font-size: 0.8rem; margin-top: 3px;\">\n                                ${formatTimeRange(booking.startTime, booking.endTime)}\n                            </div>\n                        </div>\n                    ` : ''}\n                </div>\n            `;\n        }\n        \n        return html;\n    }"
      },
      {
        "id": 326,
        "title": "Format a date for display",
        "summary": "return date.toLocaleDateString('en-US', {",
        "code": "function formatDate(date) {\n            weekday: 'long',\n            month: 'long', \n            day: 'numeric' \n        });\n    }"
      },
      {
        "id": 327,
        "title": "Format time with AM/PM",
        "summary": "return `${hour % 12 || 12} ${hour < 12 ? 'AM' : 'PM'}`;",
        "code": "function formatTimeHour(hour) {\n    }"
      },
      {
        "id": 328,
        "title": "Format time range",
        "summary": "hour: 'numeric',",
        "code": "function formatTimeRange(start, end) {\n        const startStr = start.toLocaleTimeString('en-US', { \n            minute: '2-digit',\n            hour12: true \n        });\n        const endStr = end.toLocaleTimeString('en-US', { \n            hour: 'numeric',\n            minute: '2-digit', \n            hour12: true \n        });\n        return `${startStr} - ${endStr}`;\n    }"
      },
      {
        "id": 329,
        "title": "Recenter map on all rooms",
        "summary": "if (roomsData.length === 0) return;",
        "code": "function recenterMap() {"
      },
      {
        "id": 330,
        "title": "Create bounds object",
        "summary": "",
        "code": "const bounds = new mapboxgl.LngLatBounds();"
      },
      {
        "id": 331,
        "title": "Add all room locations to bounds",
        "summary": "bounds.extend([room.location.lng, room.location.lat]);",
        "code": "roomsData.forEach(room => {\n        });"
      },
      {
        "id": 332,
        "title": "Fit map to bounds",
        "summary": "mapboxInstance.fitBounds(bounds, {",
        "code": "padding: 50,\n            duration: 1000\n        });\n    }"
      },
      {
        "id": 333,
        "title": "Error handling",
        "summary": "mapsIndoorsInstance.addListener('error', function(error) {",
        "code": "console.error('MapsIndoors error:', error);\n        createToast('Error loading map data', 'error');\n    });\n});\nBest Practices and Common Pitfalls"
      },
      {
        "id": 334,
        "title": "Here are some important best practices and common issues to be aware of when working with MapsIndoors",
        "summary": "Always Use MapboxV3View: For all new projects, use MapboxV3View instead of MapboxView as it provides better performance and compatibility.",
        "code": ""
      },
      {
        "id": 335,
        "title": "Event Listeners: Be sure to add event listeners after MapsIndoors is ready",
        "summary": "mapsIndoorsInstance.addListener('ready', function() {",
        "code": "javascript"
      },
      {
        "id": 336,
        "title": "Add your event listeners here",
        "summary": "",
        "code": "});"
      },
      {
        "id": 337,
        "title": "Floor Navigation: Always set the floor when navigating to a location to ensure the right content is displayed",
        "summary": "mapboxInstance.flyTo({",
        "code": "javascript\nfunction goToLocation(location) {\n        center: [location.lng, location.lat],\n        zoom: 20\n    });\n    mapsIndoorsInstance.setFloor(location.floor);\n}"
      },
      {
        "id": 338,
        "title": "Handling API Tokens: Never hardcode your API tokens in client-side code. Use environment variables or server-side authentication",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 339,
        "title": "Bad - hardcoded token",
        "summary": "",
        "code": "const token = 'my-secret-token';"
      },
      {
        "id": 340,
        "title": "Better - from environment variable",
        "summary": "",
        "code": "const token = process.env.MAPBOX_TOKEN;"
      },
      {
        "id": 341,
        "title": "For frontend, load from your backend",
        "summary": "async function getToken() {",
        "code": "const response = await fetch('/api/get-mapbox-token');\n    return response.text();\n}"
      },
      {
        "id": 342,
        "title": "Error Handling: Always include error handling for API calls and initialization",
        "summary": "",
        "code": "javascript\ntry {"
      },
      {
        "id": 343,
        "title": "API call or initialization",
        "summary": "} catch (error) {",
        "code": "console.error('Error:', error);"
      },
      {
        "id": 344,
        "title": "Show user-friendly error message",
        "summary": "",
        "code": "}"
      },
      {
        "id": 345,
        "title": "Memory Management: Clean up resources when they're no longer needed",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 346,
        "title": "Remove event listeners when component unmounts",
        "summary": "mapsIndoorsInstance.removeListener('click', handleClick);",
        "code": "function cleanup() {\n    markers.forEach(marker => marker.remove());\n}"
      },
      {
        "id": 347,
        "title": "Performance Optimization: Be mindful of performance, especially when dealing with large datasets",
        "summary": "Use pagination when fetching large numbers of locations",
        "code": "Only show what's needed at the current zoom level\nBatch updates to display rules"
      },
      {
        "id": 348,
        "title": "Common Issues",
        "summary": "Incorrect initialization order (Mapbox must be initialized before MapsIndoors)",
        "code": "Missing error handling for asynchronous operations\nNot waiting for the 'ready' event before interacting with MapsIndoors\nForgetting to update display rules after changing location properties\nConclusion\nThis guide covers the fundamental aspects of implementing MapsIndoors in a web application. By following\n\n\n\n\n\nContinue\n\nEdit"
      },
      {
        "id": 349,
        "title": "I'll continue with the conclusion and add a few more important sections to complete this comprehensive MapsIndoors implementation guide",
        "summary": "Conclusion (continued)",
        "code": "This guide covers the fundamental aspects of implementing MapsIndoors in a web application. By following these patterns and best practices, you can build powerful indoor mapping solutions that provide real value to users. Remember that MapsIndoors is a flexible platform that can be customized to fit many different use cases beyond what's covered here.\n\nAdvanced Configuration Options"
      },
      {
        "id": 350,
        "title": "Here are some additional configuration options that can enhance your MapsIndoors implementation",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 351,
        "title": "Configure MapsIndoors solution settings",
        "summary": "",
        "code": "function configureSolutionSettings(mapsIndoorsInstance) {"
      },
      {
        "id": 352,
        "title": "Get the current solution configuration",
        "summary": "",
        "code": "const solutionConfig = mapsIndoorsInstance.getSolutionConfig();"
      },
      {
        "id": 353,
        "title": "Adjust collision handling (0: default, 1: show all pois, 2: priority based)",
        "summary": "solutionConfig.collisionHandling = 0;",
        "code": ""
      },
      {
        "id": 355,
        "title": "automatically adjust what POIs are shown based on importance",
        "summary": "solutionConfig.automatedZoomLimit = 10;",
        "code": ""
      },
      {
        "id": 356,
        "title": "Customize selection state appearance",
        "summary": "solutionConfig.stateDisplayRules.selection.icon = \"https://path-to-your-custom-selection-icon.svg\";",
        "code": ""
      },
      {
        "id": 357,
        "title": "Update the configuration",
        "summary": "mapsIndoorsInstance.setSolutionConfig(solutionConfig);",
        "code": "}"
      },
      {
        "id": 358,
        "title": "Configure custom map appearance with Mapbox",
        "summary": "",
        "code": "function customizeMapAppearance(mapboxInstance) {"
      },
      {
        "id": 359,
        "title": "Add custom layer",
        "summary": "mapboxInstance.addLayer({",
        "code": "'id': 'custom-overlay',\n        'type': 'fill',\n        'source': {\n            'type': 'geojson',\n            'data': {\n                'type': 'Feature',\n                'geometry': {\n                    'type': 'Polygon',\n                    'coordinates': ["
      },
      {
        "id": 360,
        "title": "Define your polygon coordinates here",
        "summary": "'name': 'Custom Area'",
        "code": "]\n                },\n                'properties': {\n                }\n            }\n        },\n        'layout': {},\n        'paint': {\n            'fill-color': '#0088cc',\n            'fill-opacity': 0.2,\n            'fill-outline-color': '#0088cc'\n        }\n    });"
      },
      {
        "id": 361,
        "title": "Set up 3D building extrusion (for outdoor context)",
        "summary": "mapboxInstance.addLayer({",
        "code": "'id': '3d-buildings',\n        'source': 'composite',\n        'source-layer': 'building',\n        'filter': ['==', 'extrude', 'true'],\n        'type': 'fill-extrusion',\n        'minzoom': 15,\n        'paint': {\n            'fill-extrusion-color': '#aaa',\n            'fill-extrusion-height': [\n                'interpolate', ['linear'], ['zoom'],\n                15, 0,\n                15.05, ['get', 'height']\n            ],\n            'fill-extrusion-base': [\n                'interpolate', ['linear'], ['zoom'],\n                15, 0,\n                15.05, ['get', 'min_height']\n            ],\n            'fill-extrusion-opacity': 0.6\n        }\n    });\n}"
      },
      {
        "id": 362,
        "title": "Setup offline mode capabilities",
        "summary": "",
        "code": "function setupOfflineSupport(mapsIndoorsInstance) {"
      },
      {
        "id": 363,
        "title": "Check if offline data is available",
        "summary": "mapsIndoorsInstance.isOfflineDataAvailable()",
        "code": ".then(isAvailable => {\n            console.log('Offline data available:', isAvailable);\n            \n            if (!isAvailable) {"
      },
      {
        "id": 364,
        "title": "Start downloading data for offline use",
        "summary": "return mapsIndoorsInstance.downloadOfflineData();",
        "code": "}\n        })\n        .then(() => {\n            console.log('Offline data downloaded successfully');"
      },
      {
        "id": 365,
        "title": "Enable offline mode",
        "summary": "return mapsIndoorsInstance.enableOfflineMode(true);",
        "code": "})\n        .catch(error => {\n            console.error('Error setting up offline mode:', error);\n        });\n}\nPerformance Optimization"
      },
      {
        "id": 366,
        "title": "To ensure your MapsIndoors implementation runs smoothly, consider these performance optimization techniques",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 367,
        "title": "Optimize performance for large venues",
        "summary": "",
        "code": "function optimizeForLargeVenues(mapsIndoorsInstance) {"
      },
      {
        "id": 368,
        "title": "Limit the number of POIs shown at once",
        "summary": "",
        "code": "const displayRules = {};"
      },
      {
        "id": 369,
        "title": "Only show important POIs at lower zoom levels",
        "summary": "displayRules.zoomFrom = 18;",
        "code": ""
      },
      {
        "id": 370,
        "title": "Apply display rules to all POIs",
        "summary": "mapsIndoorsInstance.setDisplayRule('*', displayRules);",
        "code": ""
      },
      {
        "id": 371,
        "title": "Only load data for the current floor plus one above and below",
        "summary": "enableNearbyFloors: true,",
        "code": "const floorSelectionOptions = {\n        nearbyFloorCount: 1\n    };\n    \n    mapsIndoorsInstance.setFloorSelector(floorSelectionOptions);\n}"
      },
      {
        "id": 372,
        "title": "Optimize rendering performance",
        "summary": "",
        "code": "function optimizeRendering(mapsIndoorsInstance, mapboxInstance) {"
      },
      {
        "id": 373,
        "title": "Reduce frame rate when not interacting with the map",
        "summary": "let frameThrottle;",
        "code": "mapboxInstance.on('movestart', () => {\n        mapboxInstance.setRenderFrameRate(60); // Full frame rate during movement\n        clearTimeout(frameThrottle);\n    });\n    \n    mapboxInstance.on('moveend', () => {\n        frameThrottle = setTimeout(() => {\n            mapboxInstance.setRenderFrameRate(30); // Reduced when idle\n        }, 2000);\n    });"
      },
      {
        "id": 374,
        "title": "Disable animations during route rendering to improve performance",
        "summary": "animationDuration: 0",
        "code": "const directionsRendererOptions = {\n    };\n    \n    const directionsRenderer = new mapsindoors.directions.DirectionsRenderer({\n        mapsIndoors: mapsIndoorsInstance,\n        ...directionsRendererOptions\n    });\n}"
      },
      {
        "id": 375,
        "title": "Batch update display rules for better performance",
        "summary": "",
        "code": "function batchUpdateDisplayRules(mapsIndoorsInstance, locations, statusProperty) {"
      },
      {
        "id": 376,
        "title": "Group locations by status in one pass",
        "summary": "if (!locationsByStatus[status]) {",
        "code": "const locationsByStatus = {};\n    \n    locations.forEach(location => {\n        const status = location[statusProperty] || 'default';\n        \n            locationsByStatus[status] = [];\n        }\n        \n        locationsByStatus[status].push(location.id);\n    });"
      },
      {
        "id": 377,
        "title": "Apply display rules in batches",
        "summary": "",
        "code": "Object.entries(locationsByStatus).forEach(([status, locationIds]) => {"
      },
      {
        "id": 378,
        "title": "Define display rule based on status",
        "summary": "",
        "code": "const displayRule = getDisplayRuleForStatus(status);"
      },
      {
        "id": 379,
        "title": "Apply to all locations with this status at once",
        "summary": "mapsIndoorsInstance.setDisplayRule(locationIds, displayRule);",
        "code": "});\n}\nIntegration with Building Management Systems"
      },
      {
        "id": 380,
        "title": "MapsIndoors can integrate with building management systems (BMS) and IoT sensors to provide real-time information",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 381,
        "title": "Connect to an IoT platform or building management system",
        "summary": "this.apiKey = apiKey;",
        "code": "class BMSConnector {\n    constructor(apiKey, endpoint) {\n        this.endpoint = endpoint;\n        this.ws = null;\n    }\n    \n    connect() {"
      },
      {
        "id": 382,
        "title": "Connect to BMS websocket",
        "summary": "this.ws = new WebSocket(`${this.endpoint}?apiKey=${this.apiKey}`);",
        "code": "this.ws.onopen = () => {\n            console.log('Connected to building management system');\n            this.subscribe(['temperature', 'occupancy', 'energy']);\n        };\n        \n        this.ws.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            this.handleUpdate(data);\n        };\n        \n        this.ws.onerror = (error) => {\n            console.error('BMS connection error:', error);\n        };\n        \n        this.ws.onclose = () => {\n            console.log('BMS connection closed');"
      },
      {
        "id": 383,
        "title": "Attempt to reconnect after delay",
        "summary": "subscribe(topics) {",
        "code": "setTimeout(() => this.connect(), 5000);\n        };\n    }\n    \n        if (this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify({\n                action: 'subscribe',\n                topics: topics\n            }));\n        }\n    }\n    \n    handleUpdate(data) {"
      },
      {
        "id": 385,
        "title": "case 'temperature'",
        "summary": "updateTemperatureData(data);",
        "code": "break;"
      },
      {
        "id": 386,
        "title": "case 'occupancy'",
        "summary": "updateOccupancyData(data);",
        "code": "break;"
      },
      {
        "id": 387,
        "title": "case 'energy'",
        "summary": "updateEnergyData(data);",
        "code": "break;"
      },
      {
        "id": 388,
        "title": "default",
        "summary": "console.log('Unknown data type:', data.type);",
        "code": "}\n    }\n}"
      },
      {
        "id": 389,
        "title": "Update room temperature visualization",
        "summary": "if (!data.locations || !Array.isArray(data.locations)) return;",
        "code": "function updateTemperatureData(data) {"
      },
      {
        "id": 390,
        "title": "Temperature color scale",
        "summary": "if (temp < 18) return '#0088cc'; // Cold",
        "code": "const getTemperatureColor = (temp) => {\n        if (temp < 22) return '#4caf50'; // Comfortable\n        if (temp < 25) return '#ffc107'; // Warm\n        return '#f44336'; // Hot\n    };"
      },
      {
        "id": 391,
        "title": "Update display rules based on temperature",
        "summary": "mapsIndoorsInstance.setDisplayRule(item.locationId, {",
        "code": "data.locations.forEach(item => {\n        const color = getTemperatureColor(item.value);\n        \n            polygonVisible: true,\n            polygonFillColor: color,\n            polygonFillOpacity: 0.5,\n            polygonStrokeColor: color,\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });"
      },
      {
        "id": 392,
        "title": "Update tooltip content",
        "summary": "mapsIndoorsInstance.setLocationTooltipOptions(item.locationId, {",
        "code": "content: `\n                <div style=\"padding: 8px;\">\n                    <div style=\"font-weight: bold;\">${item.name}</div>\n                    <div>Temperature: ${item.value}\u00b0C</div>\n                </div>\n            `\n        });\n    });\n}"
      },
      {
        "id": 393,
        "title": "Update room occupancy visualization",
        "summary": "if (!data.locations || !Array.isArray(data.locations)) return;",
        "code": "function updateOccupancyData(data) {"
      },
      {
        "id": 394,
        "title": "Occupancy color scale (based on percentage of capacity)",
        "summary": "if (percentage < 25) return '#4caf50'; // Low occupancy",
        "code": "const getOccupancyColor = (count, capacity) => {\n        const percentage = capacity ? (count / capacity) * 100 : 0;\n        \n        if (percentage < 75) return '#ffc107'; // Medium occupancy\n        return '#f44336'; // High occupancy\n    };"
      },
      {
        "id": 395,
        "title": "Update display rules based on occupancy",
        "summary": "mapsIndoorsInstance.setDisplayRule(item.locationId, {",
        "code": "data.locations.forEach(item => {\n        const color = getOccupancyColor(item.count, item.capacity);\n        \n            polygonVisible: true,\n            polygonFillColor: color,\n            polygonFillOpacity: item.count ? 0.5 : 0.1, // Lower opacity for empty rooms\n            polygonStrokeColor: color,\n            polygonStrokeOpacity: 0.8,\n            polygonStrokeWidth: 1,\n            zoomFrom: 16\n        });\n    });\n}\nAccessibility Considerations"
      },
      {
        "id": 396,
        "title": "When implementing MapsIndoors, it's important to ensure your application is accessible to all users",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 397,
        "title": "Enhance accessibility for MapsIndoors",
        "summary": "",
        "code": "function enhanceAccessibility(mapsIndoorsInstance) {"
      },
      {
        "id": 398,
        "title": "Add accessibility attributes to map container",
        "summary": "mapContainer.setAttribute('role', 'application');",
        "code": "const mapContainer = document.getElementById('map');\n    mapContainer.setAttribute('aria-label', 'Interactive indoor map');"
      },
      {
        "id": 399,
        "title": "Create a screen reader friendly summary for locations",
        "summary": "if (event && event.id) {",
        "code": "mapsIndoorsInstance.addListener('click', (event) => {"
      },
      {
        "id": 400,
        "title": "Get location details",
        "summary": "mapsindoors.services.LocationsService.getLocation(event.id)",
        "code": ".then(location => {\n                    if (location) {\n                        const a11yInfo = getAccessibleLocationInfo(location);\n                        announceToScreenReader(a11yInfo);\n                    }\n                });\n        }\n    });"
      },
      {
        "id": 401,
        "title": "Create accessible route directions",
        "summary": "mapsIndoors: mapsIndoorsInstance",
        "code": "const directionsService = new mapsindoors.services.DirectionsService();\n    const directionsRenderer = new mapsindoors.directions.DirectionsRenderer({\n    });"
      },
      {
        "id": 402,
        "title": "When a route is calculated, create accessible directions",
        "summary": "",
        "code": "directionsService.addListener('route_changed', (route) => {\n        if (route) {\n            const a11yDirections = getAccessibleDirections(route);"
      },
      {
        "id": 403,
        "title": "Update ARIA live region with directions",
        "summary": "document.getElementById('directions-a11y').textContent = a11yDirections;",
        "code": "}\n    });\n}"
      },
      {
        "id": 404,
        "title": "Create screen reader friendly location information",
        "summary": "let info = `${props.name}, ${props.type || 'Location'}`;",
        "code": "function getAccessibleLocationInfo(location) {\n    const props = location.properties;\n    \n    \n    if (props.floor !== undefined) {\n        info += `, Floor ${props.floor}`;\n    }\n    \n    if (props.description) {\n        info += `. ${props.description}`;\n    }\n    \n    return info;\n}"
      },
      {
        "id": 405,
        "title": "Announce information to screen readers",
        "summary": "",
        "code": "function announceToScreenReader(text) {"
      },
      {
        "id": 406,
        "title": "Create or get ARIA live region",
        "summary": "let ariaLive = document.getElementById('aria-live-region');",
        "code": "if (!ariaLive) {\n        ariaLive = document.createElement('div');\n        ariaLive.id = 'aria-live-region';\n        ariaLive.className = 'sr-only';\n        ariaLive.setAttribute('aria-live', 'polite');\n        ariaLive.setAttribute('aria-atomic', 'true');\n        document.body.appendChild(ariaLive);"
      },
      {
        "id": 407,
        "title": "Add CSS for screen reader only",
        "summary": "style.textContent = `",
        "code": "const style = document.createElement('style');\n            .sr-only {\n                position: absolute;\n                width: 1px;\n                height: 1px;\n                padding: 0;\n                margin: -1px;\n                overflow: hidden;\n                clip: rect(0, 0, 0, 0);\n                white-space: nowrap;\n                border: 0;\n            }\n        `;\n        document.head.appendChild(style);\n    }\n    \n    ariaLive.textContent = text;\n}"
      },
      {
        "id": 408,
        "title": "Create accessible route directions",
        "summary": "if (!route || !route.legs) return '';",
        "code": "function getAccessibleDirections(route) {\n    \n    let directions = 'Route directions: ';\n    \n    route.legs.forEach((leg, legIndex) => {\n        if (leg.steps) {\n            leg.steps.forEach((step, stepIndex) => {\n                directions += `Step ${legIndex + 1}.${stepIndex + 1}: `;"
      },
      {
        "id": 409,
        "title": "Convert html instructions to plain text",
        "summary": "if (step.html_instructions) {",
        "code": "const div = document.createElement('div');\n                    div.innerHTML = step.html_instructions;\n                    directions += div.textContent;\n                } else {\n                    directions += step.instruction || 'Continue';\n                }\n                \n                if (step.distance && step.distance.text) {\n                    directions += ` for ${step.distance.text}`;\n                }\n                \n                directions += '. ';\n            });\n        }\n    });\n    \n    return directions;\n}\nTesting and Deployment"
      },
      {
        "id": 410,
        "title": "To ensure your MapsIndoors implementation works reliably, follow these testing and deployment practices",
        "summary": "",
        "code": "javascript"
      },
      {
        "id": 411,
        "title": "Testing utilities for MapsIndoors",
        "summary": "",
        "code": "function mapsIndoorsTesting() {"
      },
      {
        "id": 412,
        "title": "Test initialization",
        "summary": "",
        "code": "function testInitialization() {\n        return new Promise((resolve, reject) => {\n            try {"
      },
      {
        "id": 413,
        "title": "Initialize with test parameters",
        "summary": "accessToken: 'YOUR_MAPBOX_TOKEN',",
        "code": "const mapViewOptions = {\n                    element: document.getElementById('map'),\n                    center: { lat: 30.3603212, lng: -97.7422623 },\n                    zoom: 20,\n                };\n                \n                const mapViewInstance = new mapsindoors.mapView.MapboxV3View(mapViewOptions);\n                const mapsIndoorsInstance = new mapsindoors.MapsIndoors({\n                    mapView: mapViewInstance,\n                });"
      },
      {
        "id": 414,
        "title": "Add ready listener",
        "summary": "console.log('MapsIndoors initialized successfully');",
        "code": "mapsIndoorsInstance.addListener('ready', () => {\n                    resolve(mapsIndoorsInstance);\n                });"
      },
      {
        "id": 415,
        "title": "Add error listener",
        "summary": "console.error('MapsIndoors initialization failed:', error);",
        "code": "mapsIndoorsInstance.addListener('error', (error) => {\n                    reject(error);\n                });"
      },
      {
        "id": 416,
        "title": "Set timeout for initialization",
        "summary": "reject(new Error('MapsIndoors initialization timed out'));",
        "code": "setTimeout(() => {\n                }, 10000);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }"
      },
      {
        "id": 417,
        "title": "Test API connectivity",
        "summary": "async function testAPIConnectivity() {",
        "code": "try {"
      },
      {
        "id": 418,
        "title": "Test LocationsService",
        "summary": "if (!locations || locations.length === 0) {",
        "code": "const locations = await mapsindoors.services.LocationsService.getLocations({\n                take: 1\n            });\n            \n                throw new Error('Failed to get locations');\n            }\n            \n            console.log('LocationsService test passed');"
      },
      {
        "id": 419,
        "title": "Test DirectionsService",
        "summary": "floor: locations[0].properties.floor",
        "code": "const directionsService = new mapsindoors.services.DirectionsService();\n            const origin = locations[0].properties.anchor.coordinates;\n            \n            const route = await directionsService.getRoute({\n                origin: {\n                    lat: origin[1],\n                    lng: origin[0],\n                },\n                destination: {\n                    lat: origin[1] + 0.0001,\n                    lng: origin[0] + 0.0001,\n                    floor: locations[0].properties.floor\n                }\n            });\n            \n            if (!route) {\n                throw new Error('Failed to get route');\n            }\n            \n            console.log('DirectionsService test passed');\n            \n            return true;\n        } catch (error) {\n            console.error('API connectivity test failed:', error);\n            return false;\n        }\n    }"
      },
      {
        "id": 420,
        "title": "Return testing utilities",
        "summary": "testInitialization,",
        "code": "return {\n        testAPIConnectivity\n    };\n}"
      },
      {
        "id": 421,
        "title": "Production deployment checklist",
        "summary": "name: 'API Key Configuration',",
        "code": "function productionDeploymentChecklist() {\n    const checks = [\n        {\n            check: () => {"
      },
      {
        "id": 422,
        "title": "Check if API keys are properly configured",
        "summary": "?.src.match(/apikey=([^&]+)/)?.[1];",
        "code": "const apiKey = document.querySelector('script[src*=\"mapsindoors\"]')\n                \n                return !!apiKey;\n            }\n        },\n        {\n            name: 'Error Handling',\n            check: () => {"
      },
      {
        "id": 423,
        "title": "Check if global error handling is in place",
        "summary": "return typeof window.onerror === 'function';",
        "code": "}\n        },\n        {\n            name: 'Performance',\n            check: () => {"
      },
      {
        "id": 424,
        "title": "Check if performance monitoring is in place",
        "summary": "return typeof window.performance !== 'undefined' &&",
        "code": "typeof window.performance.mark === 'function';\n            }\n        },\n        {\n            name: 'Offline Support',\n            check: () => {"
      },
      {
        "id": 425,
        "title": "Check if service worker is registered",
        "summary": "return 'serviceWorker' in navigator &&",
        "code": "navigator.serviceWorker.controller !== null;\n            }\n        },\n        {\n            name: 'Accessibility',\n            check: () => {"
      },
      {
        "id": 426,
        "title": "Check for ARIA attributes",
        "summary": "return mapElement && mapElement.getAttribute('role') === 'application';",
        "code": "const mapElement = document.getElementById('map');\n            }\n        }\n    ];"
      },
      {
        "id": 427,
        "title": "Run all checks",
        "summary": "name: item.name,",
        "code": "const results = checks.map(item => ({\n        passed: item.check()\n    }));"
      },
      {
        "id": 428,
        "title": "Log results",
        "summary": "console.table(results);",
        "code": ""
      },
      {
        "id": 429,
        "title": "Return overall result",
        "summary": "",
        "code": "return results.every(result => result.passed);\n}\nFinal Thoughts"
      },
      {
        "id": 430,
        "title": "MapsIndoors provides a powerful foundation for building sophisticated indoor mapping applications. This guide has covered the key aspects of working with the SDK, but there's always more to explore. As you develop your application, remember to",
        "summary": "Start with a clear understanding of your use case and user needs",
        "code": "Implement features incrementally, testing each step\nPay attention to performance and user experience\nLeverage the full capabilities of both MapsIndoors and Mapbox\nConsider accessibility from the beginning of your development\nBy following these guidelines and using the code examples provided, you'll be well-equipped to create successful MapsIndoors implementations that deliver real value to your users.\n\nRemember that the MapsIndoors team also provides documentation, support, and professional services if you need additional help with your implementation.\n\nGood luck with your MapsIndoors project!"
      }
    ]
  }
}